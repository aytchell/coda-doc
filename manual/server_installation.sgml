<!-- DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook V3.1//EN" -->
<chapter id="InstallSvr">
<title>Installing a Coda Server</title>

<sect1>
<title>Introduction</title>

<para>A Coda cell is a set of servers which all believe one member of the set
to be the master, or SCM server.  All modifications to important Coda databases
should be made on the SCM, otherwise the SCM plays the role of an ordinary
Coda server.  The <application>updateclnt</application>/<application>updatesrv</application> daemons will then propagate changes from the SCM to the other servers.  
</para>

<para>The first server setup must be the SCM.  This chapter is divided into
three sections: installing the binaries, configuring the system using the
configuration script <application>vice-setup</application> (for both SCM and
non-SCM servers) and finally, a detailed look at what needs to be done to
setup a server manually.  Before beginning, we have provided some overview
information to assist in setting up the server.  
</para>

<sect2>
<title>Recoverable Virtual Memory</title>

<para>To help ensure that data is not lost or left in inconsistent state
between server restarts, Coda uses <emphasis>Recoverable Virtual Memory</emphasis> (RVM)
which is a transaction system that maintains the system state of the Coda
server meta data.  RVM is a data logging transaction system which writes
modifications into the RVM log and upon truncation or restart incorporates
such modifications into the RVM data file.  Both log and data file for RVM are
ideally held on raw partitions.  
</para>

<note><para>This should not be confused with Virtual Memory.</para></note>

<para>Upon startup, the Coda servers use RVM to restore the Coda system state.  For optimal performance you should have dedicated disk partitions for metadata and log partitions, ideally log partition should reside on its own disk.  However, a disk sharing the log partition with other disk partitions or the use of a log file may be used at corresponding loss of optimal performance.  </para>

<formalpara>
<title>RVM metadata storage</>
<para>This is a file or raw partition for RVM metadata.  You can use a file but it will be quite slow on a larger server. This partition must be around 4% of the total size of the files you wish to store under /vicepa (e.g. on a 2GB server we use around 80MB of rvm data). For first installations we recommend the default 22MB options, and using <emphasis>files</> for RVM log and data.    

<note>
<para>Windows NT Setup creates the file c:\coda\rvm\DATA. Use this for RVM metadata.  </para>
</note>

</para>
</formalpara>

<formalpara>
<title>Virtual memory</>
<para>The metadata, held in the RVM data file, is memory mapped.  You need that amount of space as virtual memory on your system, in addition to virtual memory to run the server (~6MB) and other software.  </para>
</formalpara>

<formalpara>
<title>RVM transaction log.</>
<para>This is a LOG file, preferably a raw partition on a disk by itself. This needs not be large, a few MB's are fine.  

<note>
<para>Windows NT Setup creates the file c:\coda\rvm\LOG. Use this for RVM transaction log.  </para>
</note>
</para>
</formalpara>

<para> Please refer to <xref linkend="RVMInitialization"> for more details on RVM.  </para>
</sect2>

<sect2>
<title>Server Disk Organization</title>

<para>Coda servers require a minimum of 2 disk partitions for optimal
performance (one raw partition for the RVM Log, one raw partition for RVM Data
and one regular UNIX file system to hold file data store in Coda), data
security and protection from accidental deletion.  For additional performance
gains the RVM Log partition should be on its own disk to avoid head movement
latencies which reduces disk seek times on log operations.  Optionally,
<filename>/vice</filename> can be a separate partition for the same reasons it
is advantages to have <filename>/var</filename> as a separate partition.
</para>

<para>However, other configuration may be used such as having the RVM Data
and Log information stored as regular UNIX files at a loss in performance and
data  security.  Also, if more than one Storage Area Data is needed on a Coda
Server (the default directory is called <filename>/vicepa</filename>), the
additional storage areas must be separate partitions (different partition from
<filename>/vicepa</filename> the default, initial storage area for data under
Coda) and mounted as <filename>/vicepb</filename>, for example.  
</para>

<para>The table below shows a possible partitioning of disks on Coda servers
with their respective purpose, mount points, typical sizes and consistency
check program.  <note><para> Sizes of these partitions were taken from one of the Coda servers at CMU-SCS, the actual sizes may vary at other installations.  </para></note>
</para>

<table id="codapart" frame="none">
<title>Example of Partitions for a Coda Server</title>
<tgroup cols=5>
  <thead>
    <row>
      <entry>Partition</entry>
      <entry>Storage Purpose</entry>
      <entry>Mounted</entry>
      <entry>Typical Size</entry>
      <entry>Whether fscked</entry>
    </row>
  </thead>
<tbody>
  <row>
    <entry>hda2</entry>
    <entry>RootandUser File System</entry>
    <entry>/</entry>
    <entry>650MB</entry>
    <entry>Yes</entry>
  </row>
  <row>
    <entry>hda5</entry>
    <entry>Var file system</entry>
    <entry>/var</entry>
    <entry>100MB</entry>
    <entry>Yes</entry>
  </row>
  <row>
    <entry>hda3</entry>
    <entry>Vice File System</entry>
    <entry>/vice</entry>
    <entry>300MB</entry>
    <entry>Yes</entry>
  </row>
   <row>
    <entry>hdc1</entry>
    <entry>RVM Log</entry>
    <entry>Not</entry>
    <entry>12MB</entry>
    <entry>No</entry>
  </row>
 <row>
    <entry>sda1</entry>
    <entry>RVM Data</entry>
    <entry>Not</entry>
    <entry>130MB</entry>
    <entry>No</entry>
  </row>
  <row>
    <entry>sda2</entry>
    <entry>Coda FS Data0</entry>
    <entry>/vicepa</entry>
    <entry>1.6GB</entry>
    <entry>Yes</entry>
  </row>
  <row>
    <entry>sda3</entry>
    <entry>Coda FS Data1</entry>
    <entry>/vicepb</entry>
    <entry>1.6GB</entry>
    <entry>Yes</entry>
  </row>
  <row>
    <entry>sda5</entry>
    <entry>Coda FS Data2</entry>
    <entry>/vicepc</entry>
    <entry>1.6GB</entry>
    <entry>Yes</entry>
  </row>
</tbody>
</tgroup>
</table>
</sect2>
</sect1>

<sect1>
<title>Installation and Configuration</title>

<tip><para>Always check the INSTALL and README files on (<ulink url="ftp://ftp.coda.cs.cmu.edu/pub/coda">ftp://ftp.coda.cs.cmu.edu/pub/coda/<replaceable>platform</>/</ulink>) for last minute changes and updates that have not yet found their way into the manual.</para></tip>

<sect2>
<title>Installing the Coda Server Binaries and Documentation</title>

<para>Currently, server files for the supported platforms are installed
into the following directories: </para>

<formalpara>
<title>Linux</title> 
<para>
<itemizedlist mark="dash">
<listitem><para> user applications - <filename>/usr/bin</filename>;</para></listitem>
<listitem><para> system binaries  - <filename>/usr/sbin</filename>;</para></listitem>
<listitem><para> other files - <filename>/etc</filename>.</para></listitem>
</itemizedlist>
</para>
</formalpara>

<formalpara><title>FreeBSD</title>
<para>
<itemizedlist mark="dash">
<listitem><para> user applications - <filename>/usr/local/bin</filename>;</para></listitem>
<listitem><para> system binaries  - <filename>/usr/local/sbin</filename>;</para></listitem>
<listitem><para> other files - <filename>/usr/local/etc</filename>.</para></listitem>
</itemizedlist>
</para>
</formalpara>

<formalpara><title>NetBSD</title>
<para>
<itemizedlist mark="dash">
<listitem><para> user applications - <filename>/usr/local/bin</filename>;</para></listitem>
<listitem><para> system binaries  - <filename>/usr/local/sbin</filename>;</para></listitem>
<listitem><para> other files - <filename>/usr/local/etc</filename>.</para></listitem>
</itemizedlist>
</para>
</formalpara>

<note><para>Please make sure your PATH environment variable is set properly for your platform.  That is, ensure FreeBSD has <filename>/usr/local/{bin,sbin}</filename> and NetBSD has <filename>/usr/pkg/{bin,sbin}</filename> in its default search paths.  Linux installs Coda into the default system paths, so Linux should not need its default search path modified.</para></note>

<para>There is one directory used by all platforms: <filename>/vice</filename> which is used to store the supporting Coda configuration and Coda databases.  It 
does not need to be in the PATH.  
</para>

<para>Here are the specific steps to install the binaries and documentation on supported platforms:
</para>

<formalpara>
<title>Linux</>
<para>
<screen>
<prompt>#</> <userinput>rpm -Uvh lwp-<replaceable>release</replaceable>.i386.rpm</userinput>
<prompt>#</> <userinput>rpm -Uvh rvm-<replaceable>release</replaceable>.i386.rpm</userinput>
<prompt>#</> <userinput>rpm -Uvh rpc2-<replaceable>release</replaceable>.i386.rpm</userinput>
<prompt>#</> <userinput>rpm -Uvh coda-debug-server-<replaceable>release</replaceable>.i386.rpm</userinput>
</screen>
</para></formalpara>

<formalpara>
<title>FreeBSD</>

<para>Build and install coda5_server port, other ports will be built and installed as dependencies:

<screen>
<prompt>#</> <userinput>cd /usr/ports/net/coda5_server</userinput>
<prompt>#</> <userinput>make</userinput>
<prompt>#</> <userinput>make install</userinput>
</screen>
</para>
</formalpara>

<formalpara>
<title>NetBSD</> 

<para>Build and install coda5_server source package, others will be built and installed as dependencies:

<screen>
<prompt>#</> <userinput>cd /usr/pkgsrc/net/coda5_server</userinput>
<prompt>#</> <userinput>make</userinput>
<prompt>#</> <userinput>make install</userinput>
</screen>
</para>
</formalpara>
</sect2>

<sect2>
<title>Configuring A Coda Server</title>

<para>Server setup is similar for all platforms.  </para>

<sect3 id="BeforeBegining">
<title>Before Beginning</title>

<para>The <filename>/vice</filename> directory will be created by the setup
script automatically if it does not already exist.  However, if your root
partition does not have enough additional space (e.g.  the <filename>SrvLog</> can become huge - over 10MB under certain circumstances), you will need to create
a partition to be mount as <filename>/vice</filename>, format the partition as
normal UNIX file system, create the mount point <filename>/vice</filename>,
add the partition and mount information to <filename>/etc/fstab</filename> and
mount it by hand <emphasis>BEFORE</> running the setup script.  
</para>

<para>Alternatively, <filename>/vice</filename> may be a symbolic link to a
directory on an existing partition with enough space but it also must be
created before running the setup script, <application>vice-setup</application>.
Sub-directories needed under <filename>/vice</filename> will be created by
<application>vice-setup</application>.  
</para>

<para>Also note that the setup of an SCM differs in some important ways from a
non-SCM setup.  So, when <application>vice-setup</application> asks: <computeroutput>Will this machine will be the SCM?</computeroutput> it is very important this question is answered correctly.  
</para>

<para>Only one SCM should be setup per Coda Cell and Coda does not support 
multiple-homing cells at this time.  
</para>
  
<para>While <application>vice-setup</application> sets up things that are common for both the SCM and non-SCM servers,  different helper scripts will be called depending on whenever  the answer to question <computeroutput>Is this the SCM?</computeroutput> is <literal>yes</> or <literal>no</>.
</para>

<formalpara>
<title>SCM Setup <application>vice-setup</application></title>
<para>
<screen>
vice-setup-scm
vice-setup-user
vice-setup-rvm
vice-setup-srvdir
</screen>
</para>
</formalpara>

<formalpara>
<title>non-SCM Setup <application>vice-setup</application></title>
<para>
<screen>
vice-setup-rvm
vice-setup-srvdir
</screen>
<application>Vice-setup</> invokes these scripts in the order listed above.
</para>
</formalpara>

</sect3>

<sect3>
<title>Setting Up A Coda Server</title>

<para>If this is the first (or only) server being setup for a Coda cell, it must be setup as the SCM by answering <literal>yes</> to the question when asked by <application>vice-setup</application>.  The SCM coordinates the sync'ing of Coda database and global configuration files needed to keep  track of data stored in Coda.  The SCM also coordinates the authentication of a Coda user.  
</para>

<para>If you are adding a non-SCM server which keeps copies of databases, but
does not distribute them to the rest of the machines comprising a Coda Cell
answer <literal>no</> to the question.  
</para>

<para>Other than the distinctions indicated above, the SCM plays no special
role in a Coda cell and can actually be down for a short time without denying
service in a multiple-machine cell site.  However, is extremely important to
only have one SCM.  
</para>

<note><para>running a server seriously dips into system virtual memory.  Running a Coda server, a Coda client <emphasis>and</emphasis> X11, the Coda Group as observed  that a slightly over 64MB of available VM is needed.  The <command>top</command> gives information on memory, CPU and process usage.  Therefore, we do not recommend running a Coda client on a Coda server and only run X, when performing server maintenance, if X is convenient to use.  
</para></note>

<para>Whether setting up an SCM Coda server or adding a server to an existing
Coda Cell, make sure the following items are taken care before running the
setup script:
</para>

<procedure>
<step><para>Create an empty directory (e.g.  <filename>/vicepa</filename>) where the file server will keep user files.  If more disk space is required than the size of single partition, additional directories on separate partitions can be created (e.g.  <filename>/vicepb</filename>).   
</para></step>

<step><para>Allocate a raw partition for RVM meta-data (you can use a file but this
will be slow on a medium to large server).  This partition must be around 4% of
the total size of the files you wish to store under <filename>/vicepa</filename> (e.g.  on a 3.3GB server we use around 130M of rvm data).  Consider 10M to be the minimum.
</para></step>

<step><para>Allocate a LOG partition, preferably on a separate disk.  This needs not
be large (12MB is large enough for a 3.3GB partition which is the largest
default configuration provided by <application>vice-setup-rvm</application>
script).
</para></step>

<step><para>Prepare two different secret tokens of up to 8 characters long (e.g. <literal>elephant</>).  The RVM files involve the journaling/transactional aspects of Coda and communicating this information between servers and via the loop-back device when the SCM updates itself.  The tokens are used to secure server-server
communications.
</para></step> 

<step><para>If the root partition is not large enough to hold
<filename>/vice</filename>,   having alternative measures setup as outlined in
<xref linkend="BeforeBegining">.
</para></step>
</procedure>

<para>Once you have the above items available, run <command>vice-setup</command>.  This command provides several useful ``canned'' configuration for setting up a Coda server.  It does a number of things "behind the scenes" as well (such as setting up the directory <filename>/vice</filename>, if it does not exist and populating it with the sub-directories <filename>backup db srv vol bin</filename>) while asking the following questions:
</para>

<informalexample>

<screen>
<prompt>Enter a random token for auth2 authentication :</prompt>
<lineannotation>This must be up to eight characters in length.</lineannotation>

<prompt>Enter a random token for volutil authentication :</prompt>
<lineannotation>This must be up eight characters in length and different
that the auth2 token.</lineannotation>

<prompt>Do you want to start the server at boot time? (y/n)</prompt> 
</screen>

<para>Answering <literal>yes</> to this question creates the file <filename>/vice/srv/STARTFROMBOOT</filename>, which must be present for either <application>rc.vice</application> or <application>vice.init</application> to start the server at boot time.  Removal of this file will prevent the Coda server from starting automatically at boot time.  
</para>

<screen>
<prompt>Is this the master server, aka the SCM machine? (y/n)</prompt>
</screen>

<para>For the first Coda machine being setup in a Coda cell, the answer must be <literal>yes</>.  If you are adding a server to an existing Coda cell, the answer must be <literal>no</>.  
</para>

<para>If you have answered <literal>no</> to the above question, you will be asked for the HOSTNAME of an existing SCM:
</para>

<screen>
<prompt>Enter the hostname of the SCM machine :</prompt> 
</screen>

<para>This question is only asked if the machine is not the SCM.  The host name entered must be that of the SCM which distributes the Coda cells database and global configuration files.  
</para>

<para>If you have answered <literal>yes</> to the question about setting up master SCM machine, you will see the message: <computeroutput> Now installing files specific to the SCM...  </computeroutput> and get following questions:
</para>

<screen>
<prompt>serverid:</prompt>
</screen>

<para>All servers in a coda cell need to have a unique number to identify them.  The servername to identifier mappings have to be defined by the administrator in the file <filename>/vice/db/servers</filename> on the SCM according to the following format:
</para>

<literallayout>
     <replaceable>servernameX</replaceable>.domain.name    1
     <replaceable>servernameY</replaceable>.domain.name    2
     <lineannotation>...</lineannotation>
</literallayout>

<para>There are currently several limitations to which identifiers are
actually usable:
<itemizedlist>
<listitem><para>all numbers must fit in a single byte;</para></listitem>
<listitem><para>0 and -1 (255) are used in error conditions;</para></listitem>
<listitem><para>127 is used to identify `replicated volumes'.</para></listitem>
</itemizedlist>
This leaves us with a usable range of 1-126 and 128-245 for server identifiers.
</para>

<screen>
<prompt>Enter the name of the rootvolume (< 32 chars) :</prompt>
<lineannotation>Enter the name of your root volume (e.g. <literal>coda.root</>)</lineannotation>
</screen>

<para>After creating root volume system will create privileged user for managing Coda servers.  You will see following message:
</para>

<screen>
You need to give me a uid (not 0) and username (not root)
for a Coda System:Administrator member on this server,
(sort of a Coda super user)
<prompt>Enter the uid of this user:</>
</screen>

<para>We recommend you to enter uid of your local account, using which you will administer Coda servers.  
</para>

<screen>
<prompt>Enter the username of this user:</>
<lineannotation>Enter your username</lineannotation>
</screen>

<para>If operation was successful, you should see following message:</para>

<screen>
An initial administrative user <replaceable>username</replaceable> (id <replaceable>uid</replaceable>) with Coda password changeme now exists.

<prompt>Are you ready to set up RVM? [yes/no]</prompt>  
</screen>

<para>RVM is the Recoverable Virtual Memory used to keep a copy of Coda Virtual memory on local disk.  Answer <literal>yes</> to this question or the setup will abort.  
</para>

<screen>
<prompt>What is your log partition?</>
</screen>

<para>While RVM can be placed in regular file, it is strongly recommended to allocate a small partition on a dedicated disk for this purpose.  If you have set aside, for example, <filename>/dev/sdc1</filename> under Linux as the log partition, enter the partitions' device name at the prompt.  <important><para>If you are setting up a *BSD system, you must enter the raw partition name.  For example, if you are going to use <filename>/dev/sd2e</filename> you must enter the raw device name <filename>/dev/rsd2e</filename>.</para></important>  The maximum template size we provide for and have tested is 30MB.
</para>

<screen>
<prompt>What is your log size? (enter as e.g.  '12M')</prompt>
</screen>

<para>The log partition keeps transaction records for Coda volume updates that may not have been written to the Coda data partition yet.  We have not extensively tested values above 30MB and do not recommend more than this.  12MB is a good value for a small to medium sized server.  The value may be entered as, <literal>12M</literal> or <literal>12288</literal> for 12 Megabytes.  Read <xref linkend="RVMMetadatapartition"> for a more detailed explanation.
</para>

<screen>
<prompt>What is your data partition (or file)?</prompt>
</screen>

<para>This allows you to specify a partition or file.  We strongly recommend a partition which can reside with other system partitions.  Remember, if you use a partition, you are using it "raw" .  it does not contain a file system of any kind.  Again, if you are using Linux, you may enter a block device name such as <filename>/dev/sdc1</filename>.

<important><para>If you are using a *BSD system, you must enter a raw device such as <filename>/dev/rsd2e</filename>.</para></important>

</para>

<screen>
<prompt>What is the size of you data partition (or file) [22M,44M, 90M, 130M]:</prompt>
</screen>

<para>This specifies the the size of the RVM data partition.  It must
be typed exactly as <literal>22M</literal>, <literal>44M</literal> , <literal>90M</literal> , or <literal>130M</literal> .  These are associated with default parameters that must be feed to <application>codasrv</application> when it is started.  The following table provides the log size to total data storage conversion:
<itemizedlist>
<listitem><para><literal>22M</literal> is good for up to 500MB;</para></listitem>
<listitem><para><literal>44M</literal> is good for up to 1.0GB;</para></listitem>
<listitem><para><literal>90M</literal> is good for up to 2.2GB;</para></listitem>
<listitem><para><literal>130M</literal> is good for up to 3.3GB.</para></listitem>
</itemizedlist>

For a detailed explanation of the trade off between different Data log sizes vs.  Data Storage Space, please see <xref linkend="RVMLogpartition">.
</para>

<screen>
<prompt>Proceed, and wipe out old data? [y/N]</prompt>
WARNING 
if you have entered erronous entries for RVM log
and RVM data partitions, you could damage your system.  Be sure you
entered correct information!
This is the last chance before any action is taken by the setup script.
Enter <literal>y</> to commit or <literal>N</> to abort.
<prompt>Where shall we store your data [/vicepa]?</prompt>
</screen>

<para>Older development versions of coda require <filename>/vicepa</filename> to be present.  This version does not.  You give a name other than the default we suggest.  However, we strongly advise not calling it <filename>/coda</filename> as that can be confused with venus.
</para>

<para>Once you successfully complete <application>vice-setup</application> you can start your Coda file-server.
</para>
</informalexample>

</sect3>

<sect3>
<title>Running Coda Server</>
<sect4>
<title>Startup</title>

<para>Start the rpc2portmap server, update server, client and the auth
server, as well as the fileserver by typing:
</para>

<formalpara>
<title>Linux</>
<para>
<screen>
<prompt>#</><userinput>/etc/rc.d/init.d/auth2.init start</userinput>
<prompt>#</><userinput>/etc/rc.d/init.d/update.init start</userinput>
<prompt>#</><userinput>/etc/rc.d/init.d/codasrv.init start</userinput>
</screen>
</para>
</formalpara>

<formalpara>
<title>FreeBSD</>
<para>
<screen>
<prompt>#</><userinput>/usr/local/etc/rc.vice start</userinput>
</screen>
</para>
</formalpara>

<formalpara>
<title>NetBSD</>
<para>
<screen>
<prompt>#</><userinput>/usr/pkg/etc/rc.d/rc.vice start</userinput>
</screen>
</para>
</formalpara>

<formalpara>
<title>Windows NT</>
<para>
<screen>
<prompt>></> <userinput>codastart</userinput>
</screen>
</para>
</formalpara>

<note><para>Coda file-server process is started using following command:
<cmdsynopsis>
  <command>codasrv</>
  <arg choice="plain">-rvm 
    <arg choice="plain"><replaceable>log_partition</replaceable></arg> 
    <arg choice="plain"><replaceable>data_partition</replaceable></arg> 
    <arg choice="plain"><replaceable>size_of_log_partition</replaceable></arg>
  </arg>
</cmdsynopsis>

To facilitate automatic setup procedure and easy changes of configuration we provide a script called <application>startserver</application>, which reads these command-line arguments from the file <filename>/vice/srv.conf</filename> and provides them for <application>codasrv</application>.  </para>

<para>The <application>vice-setup-rvm</application> creates <filename>/vice/srv.conf</> with values derived from information you have entered during setup process.  Should you deviate from one of these canned default values, you will need to either create or modify the <filename>/vice/srv.conf</filename> file to indicate the correct data size of the data partition.  For example, one of CMU's Coda servers contains:

<informalexample>
<screen>
-rvm /dev/hdc1 /dev/sda1 119070700
</screen>
</informalexample>
</para>

<para>You should be careful to specify the correct partitions for the RVM log, data segment, and size of the data segment.
</para>
</note>

<para>The <filename>SrvLog</filename> should show <computeroutput>File Server started</computeroutput>.  If not, you have a problem.
</para>

<sidebar>
<title>Log files</>

<para>Each process running on a server maintains a log file of its activities.  This file may be monitored by running <command>tail -f</> on the particular file.  For instance, an operator might want to run this command in a small window on the file server console.  The table below shows the absolute pathname of the log file for each server process.  </para>

<informaltable frame="none">
<tgroup cols=2>
<thead>
<row><entry>Server Process</><entry>Log File</></row>
</thead>
<tbody>
<row><entry>File Server</><entry><filename>/vice/srv/SrvLog</></entry></row>
<row><entry>Authentication</><entry><filename>/vice/auth2/AuthLog</></entry></row>
<row><entry>Update</><entry><filename>/vice/srv/UpdateLog</></entry></row>
</informaltable>

<para>The processes append new log entries to the end of the log file.  To control the growth of the log files over extended periods of operation, the files should be removed periodically. <filename>SrvLog</> may be removed by the <option>swaplog</> option of the <command>volutil</>; this will move the current <filename>SrvLog</> to <filename>SrvLog-1</> and begin a new log.  Swaplog also keep the last 6 log files, by removing, <filename>SrvLog-7</> and renaming the remaining log files.  a swaplog is also performed during file-server startup.  The log files of the other processes should be removed only when their respective processes are not running.  </para>
</sidebar>

<para>For a non-SCM server this startup sequence will cause the new server to first obtain the current server files such as <filename>/vice/db/ROOTVOLUME</filename> and <filename>/vice/db/VRList</filename> as well as others needed for this server to participate in the Coda cell.
</para>

<para>If the <application>codasrv</application> process started correctly, you should see <computeroutput>File Server started</computeroutput> in the SrvLog, othervise you will need to look at the error messages in <filename>SrvLog</filename> and <filename>SrvErr</filename> to determine what went wrong.  If the messages are not helpful, you should restart the server with higher debugging level.  Consult <xref linkend="Troubleshooting"> about problem solving.  </para>

<note><para>In case of trouble, it is worth first to check with <command>ps</command> whenever <application>auth2</application>, <application>rpc2portmap</application>, <application>updatesrv</application> and <application>updateclnt</application> are running.</para></note>

<sidebar>
<title>Changing debugging level of Coda server</title>
<para>The <application>codasrv</> allows you to specify the level of debugging information which is logged.  Level 0 is the lowest level of debugging available (i.e. no extra information is printed), while the highest level of debugging available is 1000 (i.e. all debugging information is printed).  As with all other server output, debugging output will appear in <filename>SrvLog</>.  Be careful to turn off debugging when its output is not in use since the log will grow rapidly and can easily fill the partition with debugging information.  </para>

<para>There are two ways to change debugging level of the file-server:
<orderedlist>
<listitem><para>re-starting server with <option>-d <replaceable>debug_level</></option> (e.g. following command <command>startserver -d 10 &</> will provide reasonable amount of additional information);</para></listitem>
<listitem><para>changing debugging level on the fly via <command>volutil <option>setdebug</> <replaceable>debug_level</></command>. </para></listitem>
</orderedlist>
</para>
</sidebar>

<para>One final step is needed to make the SCM server function.  Use the root volume you specified in <application>vice-setup</application> in place of <replaceable>your-root-volume</>.  This step creates the volume, which will be mountable by the client software.  
</para>

<informalexample>
<screen>
<prompt>#</><userinput>createvol_rep <replaceable>your-root-volume</> E0000100 /vicepa</userinput>
</screen>

<para>Once you have done this, check if it was successfully created by viewing the log:  </para>

<screen>
<prompt>#</><userinput>tail -f  /vice/srv/SrvLog &</userinput>
</screen> 
</informalexample>
</sect4>

<sect4 id="ServerShutdown">
<title>Shutdown</>
<para>To shutdown the file server gracefully, use the volume utility client procedure, <application>volutil</>.  Issue the command <command>volutil shutdown</> and then monitor the log file for the server process (<filename>/vice/srv/SrvLog</>) until it reflects that the server has shutdown  completely.  For example, here are the last few lines before file server shutdown: 
<informalexample>
<screen>
VShutdown: Taking volume usr.grajen(0xcc0006d1) offline...... Done
VShutdown: Taking volume synrgen.rep(0xcc00057c) offline...... Done
VShutdown: Taking volume i386.omega(0xcd0004fc) offline...... Done
VShutdown: Taking volume trace.rep.0(0xcc00057d) offline...... Done
VShutdown: Taking volume usr.mmv.rep.0(0xcc00057e) offline...... Done
VShutdown: Taking volume trace.backup(0xcc00057f) offline...... Done
VShutdown:  complete.
</screen>
</informalexample>
</para>
</sect4>
</sect3>
</sect2>


<sect2>
<title>Exploring replication</>

<para>First you will have to add a second server to your Coda cluster.
Install the software and use <application>vice-setup</application> again.  This time your server is <emphasis>not</> going to be the SCM.  Proceed answering the
questions until done.
</para>

<procedure>
<title>Adding server to Coda cell</title>
<note><para>All actions should be performed on SCM, unless other server is mentioned.</para></note>
<step><para>Your server needs a unique server number, to be added to the <filename>/vice/db/servers</filename> file.
</para></step>
<step><para>Make two new entries in the <filename>/vice/db/VSGDB</filename> file.  One for your new server by itself, one of the form: <literal>E0000104 <replaceable>scm-server</replaceable> <replaceable>second-server</replaceable></literal>.  <literal>E0000104</> is an example of unique id assigned to the <firstterm>Storage Group</> containing our two servers. Each set of servers that contains replicated volumes should be assigned its unique id.  
</para></step>
<step><para>Start <application>updatesrv</> and <application>updateclnt</> on the second server.</para></step>
<step><para>Start <application>codasrv</> on the second server</para></step>
<step><para>Make a new volume using <command>createvol_rep</command> giving the address of the volume as <literal>E0000104</>. 
</para></step>
<step><para>Mount the volume.</para></step>
</procedure>

<para>You can now use this volume and your files will automatically be
stored on multiple servers.  To temporarily disable a server, and see
that things continue to function normally, either shut the server down 
with <command>volutil shutdown</command> or disconnect its network.  You can also isolate the server using our network filters with <command>filcon isolate -s server-name</command>.  Using <command>filcon clear <replaceable>server-name</></command> clears the filter.
</para>

<para>Modifications made to Coda files during the server outage will be resolved when the files are first accessed.  You see message of the form <computeroutput>Resolve path</computeroutput> in the codacon output.  By typing <command>cfs checkservers</command> you can see if the server is available again.  
</para>
</sect2>
</sect1>

<sect1>
<title>Underneath vice-setup</title>

<para>The sections contained here describe what <application>vice-setup</application> does for you.  This information is useful for those who either wish to customize our default vice-setup script or wish to have a custom server setup outside the scope of Coda's setup script..
</para>

<sect2 id="RVMInitialization">
<title>RVM Initialization</title>

<para>RVM initialization requires the selection of several parameters, each of which involve tradeoffs.  Although the RVM log and data can be kept as regular UFS files, <emphasis>this is not recommended</emphasis>. Raw partitions have much stronger data consistency guarantees as well performance advantages.  It is probably best to plan out the RVM partitions on paper first, taking into consideration both the effect on RVM performance as well as overall disk usage if you choose not to use the values provided in the <application>vice-setup</> script.
</para>

<sect3 id="RVMLogpartition">
<title>The Log Partition</title>

<para>The size of the log device is based on available space and issues involving truncation.  Larger logs provide a longer accessible history of operations, are truncated less frequently, but each truncation will take a longer period of time.  Shorter logs truncate more often, but each truncation takes less time.  Log size is also strongly related to server startup time as well.  We use a 90M log size, on a storage size roughly 3.2GB spread between two UNIX partitions.  (We suggest leaving a little space at the end of the RVM log partition for safety, as RVM automatically adds about one extra page to the amount you specify).  Our <application>vice-setup</application> script provides for several default values, the largest of which is 130MB.  If you decide to follow the recommendation and use a dedicated partition, creating a 130MB partition will leave plenty of room to expand even if your initial use only suggests a size of 22M, for example.
</para>

<para>The log is initialized with <application>rvmutl</>.  At <application>rvmutl</>s prompt, use the command <command>i</>, and then specify the size of the log segment.  In specifying the size, you can use <literal>M</> for megabyte and <literal>K</> for kilobyte.  For example, to initialize a log on partition 0g to eight megabytes:
<informalexample>
<screen>
<prompt>#</><userinput>rvmutl</>
<prompt>*</><userinput>i</>
<prompt>Enter name of log file or device:</><userinput>/dev/sdc1</>
<prompt>Enter length of log data area:</><userinput>22M</>
<prompt>*</><userinput>q</>
</screen>
</informalexample>
</para>
</sect3>

<sect3 id="RVMMetadatapartition">
<title>The Metadata Partition</title>

<para>The data segment contains the meta-data of the system such as volume headers, Coda directories, resolution logs,  etc.  The size of the data  segment depends on the amount of disk space for file data, i.e.  the size of the <filename>/vicep<replaceable>?</replaceable></filename> partitions.  As a rule of thumb, you will need about 3-5% of the total file data space for recoverable storage.  We currently use 4% as a good value under most circumstances.  In our systems the data segment is 90Meg for approximately 3.2 gigabytes of disk space.  By making it smaller, you can reduce server startup time.  However, if you run out of space on the RVM Data partition, you  will be forced to reinitialize the system, a costly penalty.  So, plan accordingly.
</para>
<para>In initializing (or reinitializing), you need to pick several parameters.  The first is the starting address of the recoverable segment in your address space.  On our servers we start the RVM segment at <literal>0x50000000</> for both Linux and BSD based systems on Intel architecture.  The second is the amount of space to give the recoverable heap.  The heap will obviously grow over use, so plan accordingly.  Our heap space is <literal>0x1000000</>.  We suggest that for the last parameters you use 1Meg (<literal>0x100000</>) for the static area, use <literal>80</> free lists (or nlists), and a chunksize of <literal>32</>.  These numbers will work well with the internal structure of the file server and are provided as the default vales in the setup script <application>vice-setup</application>.
</para>
<para>To perform the data initialization, run the program <application>rdsinit</>.  <application>rdsinit</> takes two parameters, the names of the RVM log and data devices.  For example, to initialize one of our Intel based servers:
</para>

<informalexample>
<screen>
<prompt>#</> <userinput>rdsinit /dev/hdc1 /dev/sdb1</userinput>
<prompt>Enter the length of the device /dev/hdc1:</><userinput>119070700</>
Going to initialize data file to zero, could take awhile.
done.
rvm_initialize succeeded.
starting address of rvm: <userinput>0x50000000</>
heap len: <userinput>0x1000000</>
static len: <userinput>0x100000</>
nlists: 80
chunksize: <userinput>32</>
rds_zap_heap completed successfully.
rvm_terminate succeeded.
</screen>
</informalexample>

<note><para>Use of the decimal value for the length of the device
and the use of hex values for the address and lengths of the next
three values.</para></note>
</sect3>
</sect2>

<sect2>
<title>Update Monitor</title>

<para>The update monitor is used to propagate changes to the Coda server databases to all servers from the SCM.  Client update processes run on all the Coda servers and connect to a server update process running on the SCM.  The server process uses the file <filename>/vice/db/files</filename> to determine which files should be kept consistent on all the servers.  See the <citerefentry><refentrytitle>updateclnt</><manvolnum>8</></citerefentry> and <citerefentry><refentrytitle>updatesrv</><manvolnum>8</></citerefentry> man pages for more details.
</para>

<informalexample>
<para>
Create the file <filename>/vice/db/files</filename> on the SCM.  Currently our <filename>/vice/db/files</filename> looks like this:
</para>
<screen>
ROOTVOLUME
VLDB
auth2.pw
auth2.tk
auth2.tk.BAK
auth2.lock
servers
prot_users.db
prot_index.db
volutil.tk
VRDB
files
VSGDB
dumplist
</screen>
</informalexample>
</sect2>

<sect2>
<title>Authentication Database</title>

<para>Coda uses an authentication database that is separate from the UNIX password file.  This database is maintained by the SCM.  When someone authenticates to Coda, their password is checked against this database and that person is issued a token if they successfully authenticate.
</para>

<para>On servers other than the SCM, the <application>Update</application> monitor will ensure that the proper database files are propagated from the SCM.
However, you must copy the file <filename>/vice/db/volutil.tk</filename> to the new server for the <application>Update</application> monitor to work.
</para>
</sect2>
</sect1>

</chapter>
