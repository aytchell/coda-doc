<chapter id="CommonScenarios">
<title>Common Scenarios</>

<para>There are several common scenarios that you may encounter.  This chapter attempts to list as many of them as possible and suggest how to handle each scenario.

<sect1 id="ConstructHoard">
<title>Constructing a hoardfile</>

<para>Coda allows you to give files priorities that affect the cache manager.  The higher the priority, the lower the possibility that a file will get flushed from the cache to make space for a another file.  These priorities are stored in a hoard database internal to Venus.  This database is preserved across invocations of Venus, but will be erased when Venus is re-initialized.  </para>

<para>The best way to set up a hoard database is by creating hoard files.  Afteryou've created the files once, you do not need to do it again for that set of files.  You can create a hoard file by hand or by using the <application>spy</> program.  See the <citerefentry><refentrytitle>hoard</><manvolnum>1</></citerefentry> man page for more details.  </para>

<procedure>
<para>To run <application>spy</>:</para>
<step>
<para>Run <application>spy</> in the background, redirecting its output to a file.</para>
</step>
<step>
<para>Run all of the programs and access files you want to hoard.</para>
</step>
<step>
<para>Send a SIGTERM to <application>spy</> (Do not use <literal>^C</>)</para>
</step>
<step>
<para>Sort the output file, removing duplicates</para>
</step>
<step>
<para>Remove unnecessary entries</para>
</step>
<step>
<para>On each line add <literal>a</> at the beginning and a priority at the end</para>
</step>
</procedure>

<para>The following is an example of creating a hoard file for gnu-emacs. Note that while running gnu-emacs, I explicitly enter <emphasis>scribe mode</>. This makes sure that the scribe-specific files are fetched.  </para>

<informalexample>
<screen>
<prompt>%</> <userinput>spy > gemacs.out &</>
[1] 316
<prompt>%</> <userinput> gnu-emacs</>
<prompt>%</> <userinput> kill %1</>
<prompt>%</>
[1]    Done                 spy > gemacs.out
<prompt>%</> <userinput>sort -u gemacs.out > gemacs.hdb</>
<prompt>%</> <userinput>cat gemacs.hdb</>
/coda
/coda/i386_mach/omega/usr/local/emacs
/coda/i386_mach/omega/usr/misc/.gnu-emacs
/coda/misc/gnu-emacs/i386_mach/omega/bin/gnu-emacs
/coda/misc/gnu-emacs/i386_mach/omega/lisp/scribe.elc
/coda/misc/gnu-emacs/i386_mach/omega/lisp/term/x-win.el
/coda/misc/gnu-emacs/i386_mach/omega/lisp/x-mouse.elc
/coda/usr
</screen>
</informalexample>

<para>Next you should delete the first and last line of the file as you do not need them.  Then add the <application>hoard</> specific commands.  The final filelooks like:  </para>

<informalexample>
<screen>
a /coda/i386_mach/omega/usr/local/emacs 600
a /coda/i386_mach/omega/usr/misc/.gnu-emacs 600
a /coda/misc/gnu-emacs/i386_mach/omega/bin/gnu-emacs 600
a /coda/misc/gnu-emacs/i386_mach/omega/lisp/scribe.elc 600
a /coda/misc/gnu-emacs/i386_mach/omega/lisp/term/x-win.el 600
a /coda/misc/gnu-emacs/i386_mach/omega/lisp/x-mouse.elc 600
</screen>
</informalexample>

<para>The <literal>a</> that starts each line tells hoard to <command>add</> the named file to the database.  The <literal>600</> that ends each line sets the file's priority. You may also specify additional attributes for each line.  These attributes are separated from the priority by a <literal>:</> and are:

<itemizedlist>
<listitem>
<para><literal>c</literal> Current children of the given directory will inherit its hoard status.  </para>
</listitem>
<listitem>
<para><literal>c+</literal> Current and future children of the given directory will inherit its hoard status.  </para>
</listitem>
<listitem>
<para><literal>d</literal> Current descendents of the given directory will inherit its hoard status.  </para>
</listitem>
<listitem>
<para><literal>d+</literal> Current and future descendents of the given directory will inherit its hoard status.  </para>
</listitem>
</itemizedlist>
</para>

<para>For example, to hoard all of the <filename>emacs</> directory, its descendents and any future descendents, I would include the following line in a hoardfile: <literal>a /coda/i386_mach/omega/usr/local/emacs 600:d+</></para>

<para>This ensures you get all of the files you need, but you will use tens of megabytes of cache space to hoard many files that you do not need, so often you want to be more specific with respect to which files to hoard.  </para>

<para>Other valid command to <application>hoard</> are <command>clear</>, <command>delete</>, <command>list</>, and <command>modify</>. See the <citerefentry><refentrytitle>hoard</><manvolnum>1</></citerefentry> man page for more details on these commands.  </para>

<sect1 id="HoardDB">
<title>Hoarding for a Weekend</>

<para>One of the most common uses of a Coda laptop is to take it home
overnight or for the weekend.  Naturally, you want to be sure that all of the
files that you need  over the weekend are in the cache; otherwise, there is
little point in bringing the laptop home. The
<citerefentry><refentrytitle>hoard</><manvolnum>1</></citerefentry> program
helps you do this.  Create a hoard file, as described in Section <xref
linkend="ConstructHoard">, for each project you want to work on.  You may also
want hoard files for your personal files, such as your home directory if its
in Coda,  and other tools that you plan on using.  It is best to clear the
hoard database, whenever you switch projects to make sure you have enough
space in your cache.  You might consider having <command>clear</> as the first
command in your personal hoard file.  If you do, make sure you always run
hoard with this file before any other files.  Once you've built hoard files for
all of your tools and projects, its simply a matter of running hoard to build
the hoard database you want.  About fifteen minutes before you are ready to
leave, force a hoard walk with the following command: <command>hoard</>
<option>walk</>.  </para>

<para>This will cause <application>venus</> to attempt to cache all of the files in the hoard database.  <emphasis>Wait until the hoard command completes</>. You are now ready to disconnect from the network.  You are encouraged to try all of the commands you intend on using after you disconnect.  If you are missing some files, it will be easy to reconnect and hoard them.  </para>
</sect1>

<sect1 id="reintegration">
<title>Re-integrating After Disconnection</title>

<para>When you reconnect to the network after a disconnected session, Coda
will automatically try to reintegrate your changes with the Coda servers.  You
must be authenticated before reintegration occurs. Watch the file
<filename>/usr/coda/etc/console</> by
running: <command>tail</> <option>-f</> <filename>/usr/coda/etc/console</> or
look at more detailed progress using the <command>codacon</> command.
The reintegration status will be written to this file.  </para>

<informalexample>
<para>If the reintegration was successful, the log entries would look like:  </para>
<screen>
Reintegrate u.raiff, (1, 244) ( 13:33:43 )
coda: Committing CML for u.raiff ( 13:33:43 )
coda: Reintegrate: u.raiff, result = SUCCESS, elapsed = 2640.0 (15.0, 2609.0, 
15.0) ( 13:33:43 )
coda:   delta_vm = 0, old stats = [0, 1, 0, 0, 0] ( 13:33:43 )
coda:   new stats = [   0,   0.0,     0.0,    1,   0.2], [   0,   0.0, 0.0,  0,   0.0] ( 13:33:43 )
</screen>

<para>The following example is from a failed reintegration on the volume <literal>u.raiff</>.  </para>

<screen>
Reintegrate u.raiff, (1, 244) ( 13:27:10 )
coda: Checkpointing u.raiff ( 13:27:10 )coda: to /usr/coda/spool/2534/u.raiff@@%
coda%usr%raiff ( 13:27:10 )
coda: Aborting CML for u.raiff ( 13:27:10 )
coda: Reintegrate: u.raiff, result = 198, elapsed = 2437.0 (15.0, 2265.0, 531.0)  ( 13:27:10 )
coda:   delta_vm = 1000, old stats = [0, 0, 1, 0, 0] ( 13:27:10 )
coda:   new stats = [   0,   0.0,     0.0,    1,   0.2], [   0,   0.0, 0.0,   0,   0.0] ( 13:27:10 )
</screen>

<para>Notice that the <firstterm>change modify log</> (<acronym>CML</>) was
check-pointed to <filename>/usr/coda/spool/2534/u.raiff@@%coda%usr%raiff</>.
This file is a tar file containing the changes that were made on during the
disconnected session.  The files in the tar file are relative to the root of
<literal>u.raiff</>. </para>

<para>The file which failed to reintegrate will be <emphasis>in conflict</>
and will need to be repaired with the <command>repair</> tool as discussed in
<xref linkend="Inconsistent">. </para>
</informalexample>
</sect1>

<sect1>
<title>Dealing With a Flaky Network</>

<para>When the network is acting up, you can use Coda to help isolate yourself from the networking problems.  Set up your hoard database so that Venus will hoard the files you are working on.  Then, disconnect from the Coda servers with the <command>cfs</> <option>disconnect</> command. To Coda, this is equivalent to physically disconnecting from the network.  </para>

<para>Once the network becomes stable, you can use <command>cfs</>
<option>reconnect</> followed by <command>cfs</> <option>checkservers</> to
reconnect yourself to the Coda servers and re-integrate your work. Do not
forget to clear your hoard database with <command>hoard</> <option>clear</>
once you are done working on the set of files that you hoarded.  </para>

<sect1>
<title>Re-integrating Over the Phone Line</>

<para>If you are planning on taking a Coda laptop on an extended trip, you should consider using dial-up connection like SLIP or PPP to reintegrate with the Coda servers periodically. This will make your updates visible to other Coda users, protect against client crashes such as hard drive failure or theft, and allow you to work on multiple projects, even when your cache space is not large enough for all of the projects.  By using the following instructions, you can reintegrate over the phone and change the files in your hoard database.  </para>

<procedure>
<step>
<para>Dial to your network remote access server.  </para>
</step>
<step>
<para>After network connection is established, tell Coda to see which servers it can communicate with <command>cfs</> <option>checkservers</> Your laptop will now behave as if it is on the network.  Take into consideration that response time to commands will be much slower, than on the LAN.  </para>
</step>
</procedure>

<important><para>You can trigger immediate reintegration of a specific volume
by issuing <command>cfs</> <option>forcereintegrate</>
<option><replaceable>dir</></option> command.</para></important>
</sect1>

<sect1 id="Inconsistent">
<title>Repairing an Inconsistent Directory</>

<para>Occasionally, a directory entry will become inconsistent.  This happens when there is a conflict between file server replicas that Coda cannot automatically resolve or a reintegration failed because of a local update the conflicts with the global state.  The most common causes of a conflict are when  the file servers are partitioned and a file is changed on more than one of the partitions or when a disconnected client updates a file that is also updated on the servers.  When this happens, the directory containing the conflict will now look like a symbolic link and will be pointing to its <firstterm>file identifier</> (<acronym>fid</>).  For example, if a directory, <filename>conflict</>, is inconsistent, it will now appear as:
<literallayout>
% ls -l conflict
lr--r--r--  1 root      27 Mar 23 14:52 conflict -> @@7f0000b3.00000005.0000011a
</literallayout>
</para>

<para>Most applications will return the error File not found when they try to open a file that is inconsistent.  You need to resolve this conflict by using the <citerefentry><refentrytitle>repair</><manvolnum>1</></citerefentry> tool.  </para>

<sect2>
<title>Server/Server Conflicts</>

<para>Once you run repair, you need to do a <command>beginRepair</> on the object that is inconsistent.  After <command>beginRepair</> is issued, the inconsistent directory will have an entry for each of the replicated volumes.  You can look at all of these to decide which copy you want.  Use repair to copy the correct version and clear the inconsistency.  In the following example the file <filename>conflict/example</> is replicated on three servers.  It has gone inconsistent.  </para>

<informalexample>
<screen>
<prompt>%</> <userinput>ls -lL conflict</>
lr--r--r--  1 root           27 Dec 20 13:12 conflict -> @@7f0002ec.000000e3.000005d1
<prompt>%</> <userinput>repair</>
The repair tool can be used to manually repair files and directories 
that have diverging replicas.  You will first need to do a "beginRepair" 
which will expose the replicas of the inconsistent object as its children.


If you are repairing a directory, you will probably use the "compareDir" and "doRepair" commands.

For inconsistent files you will only need to use the "doRepair" command.

If you want to REMOVE an inconsistent object, use the "removeInc" command.

Help on individual commands can also be obtained using the "help" facility.
<prompt>*</> <userinput>begin conflict</>
a server-server-conflict repair session started
use the following commands to repair the conflict:
	comparedirs
	removeinc
	dorepair
<prompt>*</> <userinput>^Z</>
Stopped
<prompt>%</> <userinput>ls conflict</>
gershwin.coda.cs.cmu.edu	schumann.coda.cs.cmu.edu
<prompt>%</> <userinput>ls conflict/*</>
conflict/gershwin.coda.cs.cmu.edu:
example

conflict/schumann.coda.cs.cmu.edu:
example
<prompt>%</> <userinput>fg</>
repair
compare
<prompt>Pathname of Object in conflict? [conflict]</>
<prompt>Pathname of repair file produced?  []</> <userinput>/tmp/fix</>

 
NAME/NAME CONFLICT EXISTS FOR example

-rw-r--r--  1 raiff           0 Dec 20 13:10 gershwin.coda.cs.cmu.edu/example
-rw-r--r--  1 -101            0 Dec 20 13:11 schumann.coda.cs.cmu.edu/example


/coda/project/coda/demo/basic/rep/conflict/gershwin.coda.cs.cmu.edu/example
	Fid: (0xb0.612) VV:(0 2 0 0 0 0 0 0)(0x8002f23e.30c6e9aa)
/coda/project/coda/demo/basic/rep/conflict/schumann.coda.cs.cmu.edu/example
	Fid: (0x9e.5ea) VV:(2 0 0 0 0 0 0 0)(0x8002ce17.30d56fb9)
<prompt>Should /coda/project/coda/demo/basic/rep/conflict/gershwin.coda.cs.cmu.edu/example be removed?  [no]</> <userinput>yes</>
<prompt>Should /coda/project/coda/demo/basic/rep/conflict/schumann.coda.cs.cmu.edu/example be removed?   [no]</>  
<prompt>Do you want to repair the name/name conflicts  [yes]</>  
Operations to resolve conflicts are in /tmp/fix
<prompt>*</> <userinput>do</>
<prompt>Pathname of object in conflict?  [conflict]</>  
<prompt>Pathname of fix file? [/tmp/fix]</>
<prompt>OK to repair "conflict" by fixfile "/tmp/fix"?  [no]</> <userinput>yes</>
SCHUMANN.CODA.CS.CMU.EDU  succeeded
GERSHWIN.CODA.CS.CMU.EDU  succeeded
<prompt>*</> <userinput>quit</>
<prompt>%</> <userinput>ls conflict</>
example
<prompt>%</> <userinput>exit</>
</screen>
</informalexample>
</sect2>

<sect2>
<title>Local/Global Conflicts</>

<para>Local/global conflicts are caused by reintegration failures, which means that the mutations performed while the client was disconnected are in conflict with the mutations performed on the servers from other clients during the disconnection. The objects involved in local/global conflict are represented in the same fashion as server/server conflicts, i.e., they become dangling symbolic links.  </para> 

<para>To start a local/global repair session for an object <literal>OBJ</>, you need to invoke the <application>repair</> tool and issue the <command>beginrepair</> command with the pathname of <literal>OBJ</> as the argument. Once the repair session is started, both the local and global replicas of <literal>OBJ</> are visible at <literal>OBJ</>/local (read-only) and OBJ/global (mutable and serving as the workspace for storing the repair result for OBJ and its descendants).  The central process of repairing the local/global conflicts on OBJ is to iterate the local-mutations-list containing all the local updates performed on OBJ or its descendants, which can be displayed by the <command>listlocal</> command. Each operation in the list must be accounted for and the repair tool cooperates with Venus to maintain the current-mutation being iterated. The <command>checklocal</> command can be used to show the conflict information between the current-mutation and the global server state. You can advance the iteration to the next operation using either the <command>preservelocal</> or the <command>discardlocal</> command with the former replaying the current-mutation operation on the relevant global replicas. You can also use the <command>preservealllocal</> and <command>discardalllocal</> commands to speed up the iteration. Because the global replica OBJ is mutable, existing tools such as <application>emacs</>, etc. can be directly used to make the necessary updates. The <command>quit</> command is used to either commit or abort the repair session. The man page on on the repair commands contains more detailed information, and the following simple example illustrates the main process of repairing a local/global conflict.  </para>

<informalexample>
<para>Suppose that during disconnection, a user creates a new directory <filename>/coda/usr/luqi/papers/cscw/figs</> and stores a new version for file <filename>/coda/usr/luqi/papers/cscw/paper.tex</>. However, during the disconnection his co-author also creates a directory <filename>/coda/usr/luqi/papers/cscw/figs</> and stores some PS files in it. Upon reintegration a local/global conflict is detected at <filename>/coda/usr/luqi/papers/cscw</>.  <para>

<screen>
<prompt>%</> <userinput>ls -l /coda/usr/luqi/papers/cscw</>
lr--r--r--  1 root           27 Dec 20 00:36 cscw -> @@7f000279.00000df3.0001f027
<prompt>%</> <userinput>repair</>
<prompt>*</> <userinput>begin</>
<prompt>Pathname of object in conflict?  []</> <userinput>/coda/usr/luqi/papers/cscw</>
a local-global-conflict repair session started
the conflict is caused by a reintegration failure
use the following commands to repair the conflict:
        checklocal
        listlocal
        preservelocal
        preservealllocal
        discardlocal
        discardalllocal
        setglobalview
        setmixedview
        setlocalview
a list of local mutations is available in the .cml file in the coda spool directory

<prompt>*</> <userinput>ls -l /coda/usr/luqi/papers/cscw</>
total 4
drwxr-xr-x  3 luqi         2048 Dec 20 00:51 global
drwxr-xr-x  3 luqi         2048 Dec 20 00:51 local

<prompt>*</> <userinput>listlocal</>
local mutations are:

Mkdir   /coda/usr/luqi/papers/cscw/local/figs
Store   /coda/usr/luqi/papers/cscw/local/paper.tex (length = 19603)

<prompt>*</> <userinput>checklocal</>
local mutation: mkdir /coda/usr/luqi/papers/cscw/local/figs
conflict: target /coda/usr/luqi/papers/cscw/global/figs exist on servers

<prompt>*</> <userinput>discardlocal</>
discard local mutation mkdir /coda/usr/luqi/papers/cscw/local/figs

<prompt>*</> <userinput>checklocal</>
local mutation: store /coda/usr/luqi/papers/cscw/local/paper.tex
no conflict

<prompt>*</> <userinput>preservelocal</>
store /coda/usr/luqi/papers/cscw/global/paper.tex succeeded

<prompt>*</> <userinput>checklocal</>
all local mutations processed

<prompt>*</> <userinput>quit</>
<prompt>commit the local/global repair session?  [yes]</>
</screen>
</informalexample>
</sect2>
</sect1>
</chapter>


