<chapter id="GettingStarted">
<title>Getting Started</>

<sect1>
<title>What is Coda?  </title>

<para>Coda is a distributed file system, i.e. it makes files available to a
collection of client computers as part of their directory tree, but
ultimately maintains the authoritative copy of the file data on
servers. Coda has some features that make it stand out: it supports
<firstterm>disconnected operation</>, i.e. full access to a cached section of
the file space during voluntary or involuntary network or server
outages. Coda will automatically reintegrate the changes made on
disconnected clients when reconnecting.  Furthermore, Coda has read-write,
failover server replication, meaning that data is stored and fetch
from any of a group of servers and Coda will continue to operate when
only a subset of all servers is available.  If server differences
arise due to <firstterm>network partitions</> Coda will resolve differences
automatically to a maximum extent possible and aid users in repairing
what can't be done automatically. Coda is very differently organized
from <acronym>NFS</> and Windows/Samba shares.  Coda does have many similarities to <acronym>AFS</> and <acronym>DCE</>/<acronym>DFS</>.  </para>

<sect1>
<title>Getting clued in with the Coda terminology.  </title>
 
<formalpara>
<title>A single name space</>
<para>All of Coda appears under a single directory <filename>/coda</filename> on the client (or under a single drive under Windows). Coda does not have different exports or shares as do <acronym>NFS</> and Samba that are individually mounted.  Under <filename>/coda</filename> the volumes (aka file sets) of files exported by all the servers (living in your Coda cell) are visible (See <xref linkend="FSView">).  Coda automatically finds servers and all a client needs to know is the name of one bootstrap server that gives it information how to find the root volume of Coda.  </para>
</formalpara>

<figure id="FSView">
  <title>Coda file-system view at a workstation.</>
  <mediaobject>
    <imageobject>
      <imagedata format="gif" fileref="codafs.gif"> 
    </imageobject>
    <imageobject>
      <imagedata format="ps" fileref="codafs.ps"> 
    </imageobject>
  </mediaobject>
</figure>


<formalpara><title>Coda cell</title>
<para>Cell is a group of servers sharing one set of configuration databases.  A cell can consist of a single server or up to hundreds of servers. One server is designated as the <acronym>SCM</> - the System Control Machine.  It is distinguished by being the only server modifying the configuration databases shared by all servers, and propagating such changes to other servers. At present a Coda client can belong to a single cell.  We hope to get a cell mechanism into Coda whereby a client can see files in multiple cells.  </para>
</formalpara>

<formalpara>
<title>Coda volumes</title>
<para>File servers group the files in volumes.  A volume is typically much smaller than a partition and much larger than a directory.   Volumes have a root and contain a directory tree with files. Each volume is "Coda mounted" somewhere under <filename>/coda</> and forms a subtree of the <filename>/coda</>.  Volumes can contain mountpoints of other volumes.  A volume mountpoint is not a Unix mountpoint or Windows drive - there is only one drive or Unix mountpoint for Coda.  A Coda mountpoint contains enough information for the client to find the server(s) which store the files in the volume.  The group of servers serving a volume is called the <firstterm>Volume Storage Group</> of the volume.  </para>
</formalpara>

<formalpara>
<title>Volume Mountpoints</title>
<para>One volume is special, it is the root volume, the volume which Coda mounts on <filename>/coda</filename>.  Other volumes are grafted into the <filename>/coda</filename> tree using <command>cfs mkmount</>.  This command installs a volume mountpoint in the Coda directory tree, and in effect its result is similar to <command>mkdir mountpoint; mount device mountpoint</> under Unix.  When invoking the <command>cfs makemount</> the two arguments given are the name of the mountpoint and the name of the volume to be mounted.  Coda mountpoints are persistent objects, unlike Unix mountpoints which needs reinstating after a reboot.  </para>
</formalpara>

<formalpara>
<title>Data storage</title>
<para> The servers do not store and export volumes as directories in the local
disk filesystem, like <acronym>NFS</> and Samba.  Coda needs much more meta
data to support server replication and disconnected operation and it has
complex recovery which is hard to do within a local disk filesystem.  Coda
servers store files identified by a number typically all in a directory tree
in <filename>/vicepa</filename>.  The meta data (owners, access control lists,
version vectors) is stored in an RVM data file which would often be a raw disk
partition.  </para>
</formalpara>

<formalpara>
<title>RVM</title>
<para><acronym>RVM</> stands for <firstterm>Recoverable Virtual Memory</>.  RVM is a transaction based library to make part of a virtual address space of a process persistent on disk and commit changes to this memory atomically to persistent storage. Coda uses RVM to manage its metadata.  This data is stored in an RVM data file which is mapped into memory upon startup. Modifications are made in VM and also written to the RVM LOG file upon committing a transaction.  The LOG file contains committed data that has not yet been incorporated into the data file on disk.  </para>
</formalpara>

<formalpara>
<title>Client data</title>
<para>Data on the client is stored somewhat similarly: meta data in RVM (typically in <filename>/usr/coda/DATA</filename>) and cached files are stored by number under <filename>/usr/coda/venus.cache</filename>.  The cache on a client is persistent.  This cache contains copies of files on the server.  The cache allows for quicker access to data for the client and allows for access to files when the client is not connected to the server.  </para>
</formalpara>

<formalpara>
<title>Validation</title>
<para>When Coda detects that a server is reachable again it will <firstterm>validate</> cached data before using it to make sure the cached data is the latest version of the file.  Coda compares cached version stamps associated with each object, with version stamps held by the server.  </para>
</formalpara>

<formalpara>
<title>Authentication</title>
<para>Coda manages authentication and authorization through a token. Similar
(the details are very different) to using a Windows share, Coda requires users
to log in.  During the log in process, the client acquires a session key, or
token in exchange for a correct password. The token is associated with a user
identity, at present this Coda identity is the uid of the user performing the
log in. </para>
</formalpara>

<formalpara>
<title>Protection</title>
<para>To grant permissions the cache manager and servers use the token with its associated identity and match this against priviliges granted to this identity in access control lists (ACL).  If a token is not present, anonymous access is assumed, for which permissions are again granted through the access control lists using the <literal>System:AnyUser</> identity.  </para>
</formalpara>
</sect1>

<sect1>
<title>Organization of the client</title>

<sect2>
<title>The kernel module and the cache manager</title>
<para>Like every filesystem a computer enabled to use the Coda filesystem needs kernel support to access Coda files.  Coda's kernel support is minimal and works in conjunction with the userspace cache manager <application>Venus</application>.   User requests enter the kernel, which will either reply directly or ask the cache manager <application>venus</application> to assist in service.  </para>

<para>Typically the kernel code is in a kernel module, which is either loaded at boot time or dynamically loaded when <application>Venus</> is started.  Venus will even mount the Coda filesystem on <filename>/coda</filename>.  </para>
</sect2>

<sect2>
<title>Utilities</title>
<para>To manipulate ACL's, the cache, volume mountpoints and possibly the
network behaviour of a Coda client a variety of small utilities is provided.
The most important one is <command>cfs</command>.  </para>

<para>There is also a <command>clog</command> to authenticate to the Coda
authentication server.  The <command>codacon</command> allows one to monitor
the operatoin of the cache manager, and <command>cmon</command> gives summary
information about a list of servers.  </para>
</sect2>

<sect1>
<title>Server organization</title>
<para>The main program is the Coda fileserver <application>codasrv</application>.  It is responsible for doing all file operations, as well as volume location service.  </para>
<para>The Coda authentication server <application>auth2</application> handles requests from <application>clog</application> for tokens, and changes of password from <application>au</application> and <application>cpasswd</application>.  Only the the <application>auth2</> process on the SCM will modify the password database.  </para>

<para>All servers in a Coda cell share the configuration databases in <filename>/vice/db</filename> and retrieve them from the SCM when changes have occurred.  The <application>updateclnt</application> program is responsible for retrieving such changes, and it polls the <application>updatesrv</application> on the SCM to see if anything has changed.  Sometimes the SCM needs a (non-shared) database from another server to update a shared database.  It fetches this through an <application>updatesrv</application> process on that server using <application>updatefetch</application>.  </para>

<para>On the server there are utilities for volume creation and management. These utilities consist of shell scripts and the <application>volutil</>. There is also a tool to manipulate the protection databases.  </para>
</sect1>

<sect1><title>Authentication</title>
<para>Once you are logged in to your workstation, you need to get a Coda authentication token by running the <application>clog</application>.  <application>Clog</> will prompt you for your Coda password and use it to get a token from the <firstterm>authentication server</>.  This token will expire in about 25 hours.  After the token expires, you must use <application>clog</application> to authenticate for another 25 hours.  </para>
<para>The following in an example of running <application>clog</application> twice.  The first time, the wrong password was entered:
<informalexample>
<screen>
<prompt>%</> <userinput>clog</>
<prompt>Password:</>
Invalid login (RPC2_NOTAUTHENTICATED (F))
<prompt>%</> <userinput>clog</>
<prompt>Password:</>
<prompt>%</> 
</screen>
</informalexample>
</para>

<para>To see your newly acquired token, use <application>ctokens</application>.  This will display the tokens and their expiration time for your UID.

<informalexample>
<screen>
<prompt>%</> <userinput>ctokens</>
Token held by the Cache Manager:

Local uid: 9010
Coda user id: 9010
Expiration time: Thu Apr  6 18:51:35 2000
</screen>
</informalexample>
</para>

<para>Use the <command>cpasswd</> to change your Coda password. As with <application>passwd</application>, <application>cpasswd</application> will prompt for your current password, then ask you to enter a new password twice.

<informalexample>
<screen>
<prompt>%</> <userinput>cpasswd</>
Changing password for raiff
<prompt>Old password:</>
<prompt>New password for raiff:</>
<prompt>Retype new password:</>
Password changed, it will be in effect in about 1 hour
</screen>
</informalexample>
</para>

<para>You can "log out" of Coda by using the <command>cunlog</> to tell <emphasis>venus</emphasis> to forget your tokens.  Once you run <application>cunlog</application>, you will have the same privileges as an anonymous Coda user until you acquire a new authentication token.  <para>

<sect1>
<title>Coda File Protection</title>
<para>Coda provides a close approximation to UNIX protection semantics. An <firstterm>access control list</> (<acronym>ACL</>) controls access to directories by granting and restricting the rights of users or groups of users.  An entry in an access list maps a member of the protection domain into a set of rights.  Userrights are determined by the rights of all of the groups that he or she is either a direct or indirect member.  In addition to the Coda access lists, the three owner bits of the file mode are used to indicate readability, writability, and executability.  You should use <citerefentry><refentrytitle>chmod</><manvolnum>1</></citerefentry> to set the permissions on individual files.  Coda rights are given as a combination of <literal>rlidwka</> where:

<itemizedlist>
<listitem><para><literal>r</> - <emphasis>Read</emphasis>.  Allows the user to read any file in the directory.  </para></listitem>
<listitem><para><literal>l</> - <emphasis>Lookup</emphasis>.  Lookup allows the user to obtain status information about the files in the directory.  An example is to list the directory contents.  </para></listitem>
<listitem><para><literal>i</> - <emphasis>Insert</emphasis>.  Allows the user to create new files or subdirectories in the directory.  </para></listitem>
<listitem><para><literal>d</> - <emphasis>Delete</emphasis>.  Allows the user to remove files or subdirectories.  </para></listitem>
<listitem><para><literal>w</> - <emphasis>Write</emphasis>.  Allows the user to overwrite existing files in the directory.  </para></listitem>
<listitem><para><literal>k</> - <emphasis>Lock</emphasis>.  The lock right is obsolete and only maintained for historical reasons.  </para></listitem>
<listitem><para><literal>a</> - <emphasis>Administer</emphasis>.  Allows the user to change the directory's access control list.  </para></listitem>
</itemizedlist>
</para>

<para>Coda also has <emphasis>negative</emphasis> rights, which deny access.  Any of the normal rights listed above can also be negative.  </para>

<para>Access control lists are managed with the <command>cfs</> with the <option>listacl</> and <option>setacl</> options.  They can be abbreviated as <option>la</> and <option>sa</> respectively.  To see the access control list of any directory in a Coda file system, use <command>cfs la</>.  The following example displays the current directory's ACL:

<informalexample>
<screen>
<prompt>%</> <userinput>cfs la .</>
      System:AnyUser  rl
               raiff  rlidwka
</screen>
</informalexample>
</para>

<para>The displayed list, shows that the user "raiff" has all of the access rights possible on the directory and that the group <literal>System:AnyUser</> has read and lookup privileges.  <literal>System:AnyUser</> is a special Coda group, that includes all users.  </para>

<para>A second example shows another group, <literal>System:Coda</>.  Anyone who is a member of the group, will have the groups access rights:

<informalexample>
<screen>
<prompt>%</> <userinput>cfs la /coda</>
      	 System:coda  rlidwka
      System:AnyUser  rl
</screen>
</informalexample>
</para>

<para>Use <command>cfs sa</> to change or set a directory's access control list.  Options to <command>cfs sa</> include <option>-negative</> to assign negative rights to a user and <option>-clear</> to clear the access list completely before setting any new access rights.  You can also use <option>all</> or <option>none</> to specify all rights or no rights respectively.  </para>

<para>To remove <literal>System:AnyUsers</> access to the current directory, you would issue the following command:

<informalexample>
<screen>
<prompt>%</> <userinput>cfs sa . System:AnyUser none</>
</screen>
</informalexample>
</para>

<para>To give System:AnyUser read and lookup rights, use:
<informalexample>
<screen>
<prompt>%</> <userinput>cfs sa . System:AnyUser rl</>
</screen>
</informalexample>
</para>

<para>To deny rights to a user, use the <option>-negative</> switch:

<informalexample>
<screen>
<prompt>%</> <userinput>cfs sa -negative . baduser rl</>
</screen>
</informalexample>
</para>

<para>This will deny <literal>baduser</> read and lookup rights, even though any other user has these rights.  Note that negative rights are maintained separately from the normal rights, so to re-instate <literal>baduser</>s' read and lookup access, you must use:
<informalexample>
<screen>
<prompt>%</> <userinput>cfs sa -negative . baduser none</>
</screen>
</informalexample>
</para>

<para>If you omit the <option>-negative</> switch, then <literal>baduser</> will still be denied read and lookup access.  </para>
</sect1>

<sect1>
<title>Disconnected Operation</title>

<para>If all of the servers that an object resides on become inaccessible, then the client will use the cached copy of the object (if present) as a valid replica.  When the client does this, it is operating in <firstterm>disconnected mode</>.  </para>

<para>Disconnected mode may be the result of a network failure, or it could be the result of removing a laptop from the network.  If you make sure all of the files you want to use are cached on your laptop, you can travel with it and access your files as if you were still on the network.  </para>

<para>Unfortunately, a cache miss while operating in disconnected mode is not maskable, and you will get a <errorname>connection timed out</> error message.  Coda allows you to mark or <emphasis>hoard</emphasis> files with caching priorities to help keep the ones you want in the cache.  </para>

<para>When you are in disconnected mode, you may want to checkpoint the modify log that Coda keeps of which directories have changed.  Use <command>cfs checkpointml</> to do this.  </para>

<para>Checkpointing the modify log will ensure that changes you have made will
not be lost  if the cache manager crashes severely.  The checkpointed log
files are an identical copy of the in-memory logs that Coda uses when it
re-integrates with the servers.  </para>

<para>Coda adapts easily to low bandwidth connections like (<acronym>PPP</> or <acronym>SLIP</> modem links).  You can use this to periodically reintegrate and cache new files when you are on a trip.  </para>

<para>When you reintegrate after operating in disconnected mode, keep an eye
on your <application>codacon</application> output or run the command:
<informalexample>
<screen>
<prompt>%</> <userinput>tail -f /usr/coda/etc/console</>
</screen>
</informalexample>

This file will let you know if the reintegration was successful.  If it was not, then the files that you modified will be put in a tar file in <filename>/usr/coda/spool/<replaceable>uid</></filename>.  Reintegration fails, for example, when you modified a file in disconnected mode and someone else also modified that file on the servers.  Read <xref linkend="reintegration"> for more information on reintegration.  </para>

<sect1>
<title>Hoarding</title>
<para>Coda allows you to advise the cache manager, <application>venus</>, of critical files that it should  try to keep in the cache.  You indicate the relative importance of the files by assigning priorities to them.  This is known as <firstterm>hoarding</>.  Venus maintains an internal <firstterm>hoard database</> of these files.  Hoarding a file helps to ensure that it will be available when operating in disconnected mode.  See the <citerefentry><refentrytitle>hoard</><manvolnum>1</></citerefentry> for information on hoard files and <xref linkend="ConstructHoard"> and <xref linkend="HoardDB"> of this document for an example of how to set up your hoard database.  A convenient way of setting up your hoard database is by creating a file with commands for the <application>hoard</application>.  This file is known as a <firstterm>hoard file</>.  </para>
</sect1>

<sect1 id="Conflicts">
<title>Repairing Conflicts</title>

<para>As a result of Coda's optimistic replica management, object replicas can conflict on different servers.  A conflict arises when the same object is updated in different partitions of a network.  For instance, suppose a file is replicated at two sites (say, serverA and serverB).  If these two sites become partitioned and a user on each side of the partition updates the file (userA updates the file on serverA while userB updates the file on serverB), the file will be in conflict when the partition ends.  Conflicts may also arise at the end of disconnected operation.  </para>

<para>Coda guarantees conflict detection at the first request for that object when both servers are accessible.  When a conflict is detected, Coda attempts to perform automatic conflict resolution.  In simple cases, the conflict will be resolved automatically, a process which is transparent to the user except for a time delay in accessing the object.  However, in more difficult cases, automatic conflict resolution fails and the object is marked <emphasis>in conflict</emphasis>.  File system calls on an object which is in conflict fail with the same error code as if the object were a dangling, read-only symbolic link (usually, <errorcode>ENOENT</>).  The conflict must be resolved by a user with appropriate access to the object.  To help users resolve conflicts, Coda provides a repair tool which is discussed in <xref linkend="Inconsistent">.  </para>
