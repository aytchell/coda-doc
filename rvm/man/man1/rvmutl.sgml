<manpage TITLE="rvmutl" SECTNUM=1-rvmutl>

<mansect>NAME
<P>rvmutl -- maintenance utility for RVM log

<mansect>SYNOPSIS
<P>
<bf/rvmutl/ <em/log/
<p>
<bf/rvmutl/
<p>

<mansect>DESCRIPTION<P> The program <tt/rvmutl/ is the maintenance
utility for RVM log.  Its priniciple features are log creation and
maintenance, but there are also status and statistic display commands,
as well as printing commands for log records.  There is also a search
facility for modifications to segments.  You may find rvmutl a great
debugging tools.

The are two ways to use <tt/rvmutl/: You may supply the
name of the RVM log on the command line, or you do not supply the name
on command line but specify the log within <tt/rvmutl/ (see below).

<tt/rvmutl/ prompts for commands with a &ast; (asterisk) prompt.  Most
commands have one or more parameters, which are separated by one or
more spaces.  Some commands have abbreviations, these will be
specified in the command section.

For example, to examine the status of a RVM log (called logfile in the
example), you can do

<verb>
> rvmutl
* open_log logfile
* status

Status of log:           /home/clement/linuxobj8/rvm-src/tests/logfile

  log created on:        Tue Nov  4 1997 17:31:10.244793
  log created with:      RVM Interface Version 1.3  7 Mar 1994
  (more display omitted ...)
* quit
</verb>

As another example, suppose you want to create a RVM log device on the
partition /dev/hdc7, of size 1 Megabyte, you can do

<verb>
> rvmutl
* i /dev/hdc7 1M
* quit
</verb>

Note that in the preceding example, we use the abbreviation "i" for
the command "init_log", and we can use the unit "M" to stand for
Megabyte. 

<mansect>I/O REDIRECTION
<p>
You can redirect input and output as in typical Unix shells.  For
example, the following command will have all display redirected to the
file allrec:
<verb>
* show all &gt; allrec
* 
</verb>

<mansect>COMMANDS
<p>
In the following, I will detail all the available commands:
<descrip>
<tag><bf/all_spec/ 
<p>
Show all special log records.  Special log records
are those non-transaction records, such as wrap-around marker and
segment dictionary entry.
<p>
<tag><bf/build_seg_dict/ &lsqb;<bf/all/&rsqb; &lsqb;<bf/clear/&rsqb; 
<p> 
<tag><bf/seg_dict/ &lsqb;<bf/all/&rsqb; &lsqb;<bf/clear/&rsqb;
<p> 
Build the segment dictionary by scanning
through the log.  Segment dictionary is a in-memory structure that
maps segment code to segment file.  Segment code is used in each
transaction range as a short hand of the segment file involved. If
the <bf/all/ option is specified, the whole log will be scanned,
otherwise the scanning will stop when one segment dictionary entry is
found.  If the <bf/clear/ option is specified, the segment dictionary
will be cleared before starting the scanning process.
<p>
<tag><bf/close_log/
<p>
Close the log file.
<tag><bf/copy_log/
<p>
This provide a handy way to copy an existing log to another file or
partition.  Since rvm logs start on different offset, depending on
whether they are files or partitions, using stock Unix commands such as
cp or dd sometimes is not as nice as using this command.  Some meta
data (such as name of log) in the log status area in the destination
log will also be updated to reflect new meta data after log copying.
<p>
<tag><bf/earliest/
<p>
Show the earliest transaction record in the log.
<p>
<tag><bf/init_log/ &lsqb;<em/log/ &lsqb;<em/length/&rsqb;&rsqb;
<p>
Initialize a log if it does not exist, or re-initialize it if it does
exist.  The log will have the name <em/log/ and the length of data
area will be <em/length/.  The actual size of the log file or
partition will be slightly bigger because: 1.  there is a log status
area (of size 3 sectors); and 2.  for log used on raw partition, there
will be an offset (of 16 sectors) to jump off possible disklabel of
the partition.
<p>
The <em/length/ parameter is specified as an integer, optionally
followed by a single character size code.  The following size codes
are defined: <bf/K/ or <bf/k/ for kilobytes, <bf/M/ or <bf/m/ for
megabytes, <bf/S/ or <bf/s/ for sectors (512 bytes), <bf/P/ or <bf/p/
for pages (which have system dependent sizes) and <bf/B/ or <bf/b/ for
bytes (default).
<p>
If either parameter is not specified, <bf/init_log/ will prompt for
the missing information.
<p>
RVM maintains the log continuously after creation.  If you are going
to re-initialize an existing log, make sure the log is empty before the
re-initialization, otherwise, the transaction records in the log would
be lost (i.e., they would not be applied to the data segment).  You
can apply all transaction records to the data segments and empty the
log (also known as truncate in this manual) by the <bf/recover/
command.  You can use the command <bf/status/ to check whether a log
is empty.
<tag><bf/find_earliest/
<p>
Print the offset of the earliest transaction record in the log.

<tag><bf/find_tail/
<p>
Print the offset of the tail of the log.

<tag><bf/head/
<p>
Print the transaction record at the head of log.  (Note that there
could be even earlier than the head record -- smaller record number
and smaller time stamp.  They are considered truncated from the log
and can be overwritten upon them freely.  They are still on the log
just because it happens that rvm has not yet overwritten on them, and
they may be useful for debugging. The command
<bf/earliest/ prints the earliest record.)

<tag><bf/log/ &lsqb;<em/log/&rsqb; &lsqb;<bf/no_tail/&rsqb; &lsqb;<bf/no_update/ &verbar; <bf/update/&rsqb; 
<p>
<tag><bf/open_log/ &lsqb;<em/log/&rsqb; &lsqb;<bf/no_tail/&rsqb; &lsqb;<bf/no_update/ &verbar; <bf/update/&rsqb; 
<p>
Open the rvm log named <em/log/.  You must open a log before you can
use most of the rest commands.  The optional <bf/no_tail/ switch turns
of the search of tail of the log (for example, when the log tail is
corrupted).  The optional <bf/no_update/ and <bf/update/ switch
controls whether update will be made on the log and segment (they turn
on the rvm internal global variable <tt/rvm_no_update/).

<tag><bf/n/ &lsqb;<em/num/&rsqb; <p>
<tag><bf/next/ &lsqb;<em/num/&rsqb; <p>
Print the next <em/num/ records.  If the optional argument <em/num/ is
not specified, then the next one record will be printed.

<tag><bf/ns/ &lsqb;<em/num/&rsqb; <p>
<tag><bf/next_sub_rec/ &lsqb;<em/num/&rsqb; <p>
Print the next <em/num/ sub-records.  Sub-records are the individual
ranges of a transaction.  If the optional argument <em/num/ is
not specified, then the next one sub-record will be printed.

<tag><bf/p/ <p>
<tag><bf/peek/ &lsqb;<em/file/&rsqb; <em/offset/ / &lsqb;<em/csf/&rsqb;
Peek on (or dump) the content of <em/file/.  You must specify the
argument <em/file/ when you first peek or poke on a file, afterward you can
omit the argument and rvmutl will continue using the current file.
The argument <em/offset/ determines from where
the dump should start.  The argument <em/csf/ determines how the dump
should be done, it comprises of three components: <em/c/, <em/s/ and
<em/f/; each of them represents the count, size, and format
respectively. <em/c/ is an integer and determines how many units, with
size specified by <em/s/, should be dumped, and <em/f/ specifies what 
is the dump format.
<p>
In the following two examples, the first command dumps, from offset 0,
eight bytes in hexadecimal format; the second command dumps two
long integers in decimal format.  Note that how the same file
content can be dumped into different format.
<verb>
* peek 0 / 8xb
00000000000: 0x18 0000 0000 0000 0x23 0x17 0x14 0x63
* peek 0 / 2dl
00000000000:           24   1662261027
</verb>
<p>
There are seven different possible sizes: <bf/b/ for byte, <bf/l/ for
long, <bf/s/ for short, <bf/O/ for offset (two long integers
representing the high and low order bits respectively), <bf/f/ for
float, <bf/D/ for double and <bf/t/ for time value.
<p>
There are nine different possible formats: <bf/c/ for character,
<bf/d/ for decimal, <bf/o/ for octal, <bf/x/ for hexidecimal, <bf/u/
for unsigned, <bf/f/ for float, <bf/D/ for double, <bf/O/ for offset
(two long integers representing the high and low order bits
respectively) and <bf/t/ for time value.
<p>
You may omit the arguments <em/c/, <em/s/ and <em/f/, and
rvmutl will use the defaults, which are 1, d (decimal) and l (long)
respectively, for the three arguments respectively.
<p>
<tag><bf/poke/ &lsqb;<em/file/&rsqb; <em/offset/ &divide; <em/cs/ = <em/val/ &lsqb;<em/val/ ... &rsqb;
<p>
Poke on (modify) the content of <em/file/.  You must specify the
argument <em/file/ when you first peek or poke on a file, afterward
you can omit the argument and rvmutl will continue using the current
file.  The argument <em/offset/ determines from where the modification
should start.  The argument <em/cs/ determines how the modifications should be
done, it comprises of two components: <em/c/ and <em/s/;
each of them represents the count and size respectively.
<em/c/ is an integer and determines how many units, as specified by
<em/s/, should be modified.
<p>
Examples:
<verb>
* poke 512 / 4db = 25
* peek 512 / 8db
       512:  25  25  25  25   0   0   0   0

* poke 512 / 2xl = 25
* peek 512 / 8db
       512:  25   0   0   0  25   0   0   0

* poke 512 / 2b = 0x26 0x27
* peek 512 / 8db
       512:  38  39  38  39  25   0   0   0

* poke 512 / b = "abcde"
* peek 512 / 8db
       512:  97  98  99 100 101   0   0   0
</verb>
Note that in the second example, the character <bf/x/, which indicates
hexidecimal format in peek, is sliently ignored.  To enter a
hexidecimal number, you should us prefix '0x' as in the third
example.   Note also that how a pattern is repeated by using the
argument <em/c/ in first and third example.
<p>
There are seven different possible sizes: <bf/b/ for byte, <bf/l/ for
long, <bf/s/ for short, <bf/O/ for offset (two long integers
representing the high and low order bits respectively), <bf/f/ for
float, <bf/D/ for double and <bf/t/ for time value.
<p>
You can also enter string by using the double-quote mark (&dquot;), as in
the last example.

<tag><bf/pr/ &lsqb;<em/num/&rsqb; <p>
<tag><bf/prev/ &lsqb;<em/num/&rsqb; <p>
Print the previous <em/num/ records.  If the optional argument<em/num/
is not specified, then the previous one record will be printed.

<tag><bf/ps/ &lsqb;<em/num/&rsqb; <p>
<tag><bf/prev_sub_rec/ &lsqb;<em/num/&rsqb; <p>
Print the previous <em/num/ sub-records.  Sub-records are the individual
ranges of a transaction.  If the optional argument <em/num/ is
not specified, then the previous one sub-record will be printed.

<tag><bf/quit/
<p>
Quit rvmutl.

<tag><bf/read_status/
<p>
Re-read the log status from on-disk log device (file or partition) to
in-memory structure (<tt/status/).  Note that the command <bf/status/
show the content of the in-memory structure, but not the on-disk
device.   If you have made changes to the on-disk device, you may want
to re-read them into the memory.

<tag><bf/monitor/ &lsqb;<bf/clear/&rsqb; &lsqb;<bf/no_update/ &verbar; <bf/update/&rsqb;
<p>
You can specify memory ranges to be monitored by this command.  When a
memory range is monitored, there will be message printed out whenever
there are modification within the range (E.g. in <bf/recover/).  The
switch <bf/clear/ will clear all the monitor previous set.  The switch
<bf/no_update/ and <bf/update/ carry the usual meaning
(c.f. <bf/open_log/).  You will be asked, interactively, for the
addresses and formats for the ranges you want to monitor, you should
use the syntax similar to <bf/poke/.  The following example shows
how to use <bf/monitor/, <bf/show monitor/, as well as how
<bf/recover/ prints out the modification.
<verb>
* open_log log3
* monitor update
  More ranges (y or n [n])? y

  Enter list of addresses/format, terminate with null line
:  0x200d7550/1l
: 
* show monitor

Range    Address/format     Length
   1    0x200d7550/1dl          4

* recover
do_nv: data from log record 2101, range 52
  monitored range 1, 0x200d7550, length 4 matched by
  modified range 0x200d7550, length 4
  0x200d7550:    537286660

change_tree_insert: inserting entire range
  monitored range 1, 0x200d7550, length 4 matched by
  modified range 0x200d7550, length 4
  0x200d7550:    537286660


do_nv: data from log record 2101, range 51
  monitored range 1, 0x200d7550, length 4 matched by
  modified range 0x200ced40, length 8367
  0x200d7550:            0

change_tree_insert: inserting entire range
  monitored range 1, 0x200d7550, length 4 matched by
  modified range 0x200ced40, length 8367
  0x200d7550:            0

do_nv: data from log record 2101, range 50
  monitored range 1, 0x200d7550, length 4 matched by
  modified range 0x200cdcc4, length 16
  0x200d7550:            0

change_tree_insert: inserting entire range
  monitored range 1, 0x200d7550, length 4 matched by
  modified range 0x200cdcc4, length 16
</verb>

<!--
<tag><bf/replay/ &lsqb;<bf/clear/&rsqb; &lsqb;<bf/file/&rsqb; <bf/head/ &verbar; <bf/tail/ &lsqb;<bf/no_update/ &verbar; <bf/update/&rsqb; <em/rec_num/
<p>
E.g.
<verb>
* replay log tail 40756
</verb>
-->

<tag><bf/recover/ &lsqb;<bf/clear/&rsqb; &lsqb;<bf/file/&rsqb; &lsqb;<bf/no_update/ &verbar; <bf/update/&rsqb;
<p>
Truncate the log.  Truncation means applying the transaction records,
that were logged on the log, to the data segment, and then reclaiming the
space on the log used by those records.

<tag><bf/set/ &lsqb;<bf/seg_dict/&rsqb; <em/field/ &verbar; <em/addr/ = <em/val/
<p>
Set <em/field/ (or memeory locateion at <em/addr/) to <em/val/.  There
are five fields that you can set: <bf/head/, <bf/tail/,
<bf/prev_head/, <bf/prev_tail/ and <bf/log_start/.  (You can use
<bf/prev head/ and <bf/prev tail/ to represent <bf/prev_head/ and
<bf/prev_tail/ respectively.)  Only the in-memory structure of the
field is changed by this command, you can use <bf/write_status/ to
write the in-memory structure (status area) to disk.

<tag><bf/s/ <p>
<tag><bf/show/ <p>

<descrip>
<tag><bf/all/ all records<p>
<tag><bf/all_records/ all records<p>
<tag><bf/earliest/ earliest record<p>
<tag><bf/head/ record at head of log<p>
<tag><bf/mods/ <em/of/ <bf/&divide;/ <em/cs/ &lsqb;= <em/val/&rsqb; <p>
<tag><bf/modificationss/ <em/of/ <bf/&divide;/ <em/cs/ &lsqb;= <em/val/&rsqb; <p>
E.g.
<verb>
* show mods 0x2000005c / 8b

Record number: 40756 modifies specified range:

  Modification range:        1   Log offset:    224664
    VM address:     0x2000005c   Length:        52
    Segment code:            1   Offset:      4188
    Record length:         108   Back link:     48

  0x2000005c:  74 -107   0   0   0   0   0   0

* show mods 0x2000005c / 1b = 74

Record number: 40756 assigns specified values

  Modification range:        1   Log offset:    224664
    VM address:     0x2000005c   Length:        52
    Segment code:            1   Offset:      4188
    Record length:         108   Back link:     48

  0x2000005c:  74

* show mods 0x2000005c / 1b = 75
  -- no more records
</verb>
<tag><bf/monitor/ all the range being monitored. <p>
<tag><bf/next/ next record <p>
<tag><bf/next_sub_rec/ next subrecord <p>
<tag><bf/ns/ next subrecord <p>
<tag><em/num/ by record number <p>
<tag><bf/prev/ previous record <p>
<tag><bf/previous/ previous record <p>
<tag><bf/ps/ previous subrecord <p>
<tag><bf/prev_sub_rec/ previous subrecord <p>
<tag><bf/rec_number/ <em/num/ by record number <p>
<tag><bf/remaining/ all remaining records <p>
<tag><bf/seg_dict/ segment dictionary <p>
<tag><bf/seg_dictionary/ segment dictionary <p>
<tag><bf/statistics/ statistics of rvm activities <p>
<tag><bf/status/ status area of the log <p>
<tag><bf/log_status/ status area of the log <p>
<tag><bf/sr/ current subrecord <p>
<tag><bf/sub_rec/ currect subrecord <p>
<tag><bf/tail/ tail record <p>
<tag><bf/timestamp/ by record timestamp (note: no effect)<p>

</descrip>

<tag><bf/sizeof/ <em/struct/ | <bf/all/ <p>
Show the size of a the give structure <em/struct/, or size of all
structure.  The unit is byte.  The following structure can be shown:
<bf/condition/, <bf/device_t/ (<bf/dev/), <bf/dev_region_t/,
<bf/FLUSH_BUF_LEN/, <bf/free_page_t/, <bf/MAXPATHLEN/, <bf/int/,
<bf/list_entry_t/, <bf/log_t/ (<bf/log/), <bf/log_buf_t/,
<bf/LOG_DEV_STATUS_SIZE/, <bf/log_dev_status_t/, <bf/log_seg_t/,
<bf/LOG_SPECIAL_IOV_MAX/, <bf/LOG_SPECIAL_SIZE/, <bf/log_special_t/,
<bf/log_status_t/ (<bf/status/), <bf/log_wrap_t/, <bf/long/,
<bf/MAX_READ_LEN/, <bf/mem_region_t/, 
<bf/MIN_NV_RANGE_SIZE/, <bf/MIN_FLUSH_BUF_LEN/,
<bf/MIN_RECOVERY_BUF_LEN/, <bf/MIN_TRANS_SIZE/, <bf/mutex/,
<bf/NUM_CACHE_TYPES/, <bf/NV_LOCAL_MAX/, <bf/nv_range_t/ (<bf/nv/),
<bf/NV_RANGE_OVERHEAD/, <bf/page_size/, <bf/range_t/, <bf/rec_end_t/,
<bf/rec_hdr_t/, <bf/RECOVERY_BUF_LEN/, <bf/region_t/,
<bf/rvm_length_t/, <bf/rvm_offset_t/, <bf/rvm_options_t/,
<bf/rvm_region_t/, <bf/rvm_tid_t/, <bf/rw_lock_t/ (<bf/rw_lock/), 
<bf/rw_lock_mode_t/, <bf/seg_t/, <bf/struct_id_t/, <bf/int_tid_t/,
<bf/timeval/, <bf/trans_hdr_t/, <bf/TRANS_SIZE/, <bf/tree_links_t/,
<bf/tree_node_t/, <bf/TRUNCATE/, <bf/ulong/, <bf/unsigned/.

<tag><bf/status/ <p>
<tag><bf/log_status/ <p>
Show the log status area, which is the meta data about the log
(include head offset, tail offset, space used by records, total log
size, first record number, last record number, log creation time, last
truncation time etc).

<tag><bf/sr/ <p>
<tag><bf/sub_rec/ <p>
Show the current subrecord.

<tag><bf/statistics/ <p>
Show the statistics of rvm activities.

<tag><bf/tail/ <p>
Show the transaction record at the tail of log.

<tag><bf/update/ <p>
Turn on update (i.e. set to false the rvm-internal global variable
<tt/rvm_no_update/.) Update will not be made on the
log and segment.

<tag><bf/no_update/ <p>
Turn off update (i.e. set to true the rvm-internal global variable
<tt/rvm_no_update/.)  Update will be made on the log and segment.

<tag><bf/write_status/ <p>
Write out the in-memory log status structure to the log status block
on disk.
</descrip>


<mansect>BUGS
<p>
The command <bf/find_hole/ is not yet documented.

Peeking using the format or size of time value (<bf/t/) does not work.

The way to poke an offset value is not yet documented.

<bf/sizeof/ of some structs (e.g. <bf/condition/, <bf/int/) wrongly
displays the page size rather than the size of the structure.

The use of <bf/no_update/ does not quite work.  Rvmutl easily crashes
when the switch is used.

The exact semantic of <bf/replay/ command is not documented, and the
command itself crashes quite easily.

The use of <bf/seg_dict/ in <bf/set/ is not yet documented.

The command <bf/show timestamp/ has no effect.

<mansect>AUTHOR
<p>
Yui Wah LEE completely rewrote this man page (Nov. 1997)
</manpage>
