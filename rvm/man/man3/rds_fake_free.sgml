

<manpage TITLE="rds_fake_free" SECTNUM=3>
<mansect>NAME 
 <P>rds_fake_free - deferred return of blocks to the recoverable heap

<mansect>SYNOPSIS
<p>
<verb>
#include "rds.h"

typedef struct intlist &lcub;
    unsigned long           size;
    unsigned long           count;
    char                    **table;
&rcub; intentionList_t;

int rds_fake_free(addr, list);
char            *addr; /* address of block to be freed */
intentionList_t *list; /* pointer to intention list */

int rds_do_free(addr, list);
intentionList_t *list; /* pointer to intention list */
rvm_mode_t      mode;  /* transaction commit mode */

</verb>

<mansect>DESCRIPTION<P>
In cases where the application must free recoverable storage without
knowing whether the transaction will later abort, <tt>rds_free</tt> should
not be used since the internal free list lock is not held until commit
or abort.
To handle these cases, RDS allows the creation of an <em>intention
list</em> for the blocks to be freed.  At the point where the block would
logically be freed, <tt>rds_fake_free</tt> is called to place the block on
the intention list.
To actually free the blocks on the intention list, <tt>rds_do_free</tt> is
called.  This must be done immediately before calling
<tt>rvm_end_transaction</tt> for the deallocating transaction, and must not
be done if 
<tt>rvm_abort_transaction</tt> is called.  Also, no context swaps can be
allowed between the calls on <tt>rds_do_free</tt> and <tt>rvm_end_transaction</tt>.

The intention list header (type <tt>intentionList_t</tt>) must be provided
by the application.  The <tt>table</tt> 
field must be null on the first call to <tt>rds_fake_free</tt>.  RDS will
allocate space as necessary for the blocks to be freed.
<tt>rds_do_free</tt> will deallocate the <tt>table</tt> vector.  The application
is responsible for deallocation of <tt>table</tt> if the transaction is
aborted.  Deallocation of the <tt>intentionList_t</tt> itself is always the
responsibility  of the application.
RDS does not internally synchronize access to the intention list.
If more than one thread is involved in the transaction,
synchronization of access to the intention list is the responsibility
of the application.

The block to be deallocated is passed in the <tt>addr</tt> parameter to
<tt>rds_fake_free</tt> .  This
block must not already be free, or the <tt>EFREED_TWICE</tt> error
code will be returned.
The <tt>ECORRUPT</tt> error return is given by <tt>rds_fake_free</tt> if the
block guards are damaged.  <tt>rds_do_free</tt> returns this code if
internal damage to the free lists is found.

These functions return error codes as the
value of the function rather than in a parameter.


<mansect>DIAGNOSTICS<P>
<descrip>
<tag/SUCCESS/ success
<tag/EFREED_TWICE/ block is already free
<tag/ECORRUPT/ block or heap damaged
<tag/EBAD_ARGS/ block is not on 4 byte boundary
<tag/EHEAP_INIT/ RDS not initialized
<tag/positive values/ RVM return codes
</descrip>


<mansect>SEE ALSO<P>
<tt>rds_free (3)</tt>, <tt>rds_malloc (3)</tt>


<mansect>AUTHOR<P>
David C. Steere


</manpage>
