

<manpage TITLE="rds_prealloc" SECTNUM=3>
<mansect>NAME 
 <P>rds_prealloc - initialize allocation pools

<mansect>SYNOPSIS
<p>
<verb>
#include "rds.h"

int rds_prealloc (size, nblocks, tid, err)

unsigned long size;    /* size of allocation request */
unsigned long nblocks; /* length of allocation request */
rvm_tid_t     *tid;    /* pointer to transaction identifer */
int           *err;    /* pointer to error return location */
</verb>

<mansect>DESCRIPTION<P>
<tt>rds_prealloc</tt> assists applications in minimizing heap fragmentation
by pre-allocating pools of blocks in sizes that the application is
known to use in relatively large numbers.
<tt>rds_prealloc</tt> is best called immediately after the heap is
initialized, although it can be called anytime.
When pools of several block sizes are pre-allocated, they should be
allocated in increasing block size order so that the larger blocks are
not split to make the smaller.

The <tt>size</tt> parameter specifies the size, in bytes, of the blocks to
be pre-allocated, and <tt>nblocks</tt> controls the number of blocks
pre-allocated.

Because allocation actions in the recoverable heap must be done via
transactions, <tt>rds_prealloc</tt> offers two choices for the transaction.
In the first case, <tt>rds_prealloc</tt> can be instructed to use an existing
transaction begun in <tt>restore</tt> mode, by passing the address of a
valid <tt>rvm_tid_t</tt> record in the <tt>tid</tt> parameter.
This avoids extra transaction start and commit
overhead and provides automatic deallocation if the transaction must
later abort.
However, no context swap can be permitted between allocation and
transaction commit or abort since the uncommitted state is visible to
other allocations.

If context swaps cannot be prohibited, or the available transaction was
started in <tt>no_restore</tt> mode, the <tt>tid</tt> parameter should be
set to null, instructing <tt>rds_prealloc</tt> to start an internal
transaction.
This transaction will be committed in <tt>no_flush</tt> mode if the
allocation is made, and aborted otherwise.
In this case, if the allocating
transaction later aborts, the pre-allocated blocks remain allocated.


<mansect>DIAGNOSTICS<P>
<descrip>
<tag/SUCCESS/ success
<tag/ENO_ROOM/ RDS heap exhausted
<tag/ECORRUPT/ RDS heap damaged
<tag/EHEAP_INIT/ RDS not initialized
<tag/positive values/ RVM return codes
</descrip>


<mansect>SEE ALSO<P>
<tt>rds_malloc(3)</tt>, <tt>rds_init_heap(3)</tt>, <tt>rds_zap_heap(3)</tt>


<mansect>AUTHOR<P>
David C. Steere


<mansect>BUGS<P>
The internal synchronization is not valid with pre-emptive threads.


</manpage>
