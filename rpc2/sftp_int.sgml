<Chapt>SFTP Internals<P>
<label id="SFTPInternals">

<sect>Background<p>

An SFTP file transfer can take place from either an RPC2 server or a
RPC2 client. To avoid confusion we will refer to the
transmitting entity as the <em>source</em> and the receiver entity as the <em>sink</em>.
RPC2 clients and servers are not regarded as peers. While an RPC2
client might be someones personal workstation, an RPC2 server
could be serving a large user community. In an effort to improve
scalability when more clients are added to the system, the servers
will handle all SFTP flow control, irrespective if they are the source
or the sink.

An RPC2 client can use SFTP to transfer a file simultaneously to more
than one RPC2 server using IP multicasting. Multicast file transfers
are only possible when the source is an RPC2 client. The sinks will
send flow control information to the source, and it will adapt to the
requirements of the slowest sink.

An SFTP file transfer is basically a cyclic exchange of data and
acknowledgements. At the beginning of each cycle, the source will send
a block of data packets. It will then wait for an acknowledgement to
arrive. The acknowledgement will specify which packets the sink has
received. The cycle then repeats. The source will now retransmit any
packets that it knows that the sink did not receive, followed by a
block of new packets.

When the source has transmitted a block of data packets, it will wait
for the arrival of an acknowledgement. If the source is an RPC2
server and the acknowledgement does not arrive after a predetermined
time, the source will retransmit the block of data packets. It
basically acts as if it received an acknowledgement that indicated
that the entire block of data packets had been lost.

If the source is an RPC2 client, however, it will wait passively for
an acknowledgement to arrive. If the sink does not receive more data
packets after a predetermined period of time, it will conclude that
acknowledgement was lost in transit and retransmit it.

<sect>SFTP Code Structure<p>
In this section we describe the SFTP code structure.  
Our description assumes that the reader is already familiar with the
description of basic RPC2 internals in Chapter <ref id="RPC2Int" name="XXX">.


<sect1>Thread creation and Initialization<p>
In the base RPC2, the RPC2 client and server communicate via Internet Sockets.
Both at the client and at the server, the socket is created during
initialization by calling RPC2&lowbar;Init.  A SocketListener thread is present at
both ends to monitor these sockets.

When using SFTP, in addition to the above, there is another set of sockets created; one at the
client and another at the server.  These sockets are monitored by the SFTP&lowbar;Listener.  Both of
these are created during the iniailization of the SFTP package.

Note that there are two independent channels of communication between the client and the server.
The first channel (which we will refer to as the <em>RPC2 channel</em>)
that is associated with the base RPC2 is used for making simple RPCs, for 
making RPCs requesting for the file transfers, for retransmissions and BUSYs.  All other 
exchanges related to the file transfer are handled by the second channel  which will be referred
to in future as the <em>sftp channel</em>.

As previously mentioned, a file can be transferred from a client to a server
or from a server to a client.
In the first case, the server is the sink.
In the second case, the client is the sink. 
The code however is not symmetric; i.e., the code executed when
a client is the sink is slightly different from the code executed
when a server is the sink.  We describe both cases below.

<sect1>Data Structures used in SFTP<p>
In addition to the data structures used in RPC2 (on the RPC2 channel), SFTP uses a data 
structure called SFTP&lowbar;Entry which is given in sftp.h.  It contains fields  relevant to the sftp
channel such as the LocalHandle.  Other fields include the state of the file transfer,
the packet size, the window size and a number of others.  It is created by the call
sftp&lowbar;AllocSEntry.

<sect1>File transfer from server to client<p>
This is the case in which the server is the source and the client is the sink.
The client makes a request for the file by doing a <em>RPC2&lowbar;MakeRPC</em>
on the RPC2 channel. 
This is received by the servers SocketListener which wakes up a suitable
LWP blocked on a <em>RPC2&lowbar;GetRequest</em>.
The LWP then calls the routine that is meant to handle this request.
This routine contains calls to two routines, <em>RPC2&lowbar;InitSE</em>
and <em>RPC2&lowbar;CheckSE</em>.
<em>RPC2&lowbar;InitSE</em>  initializes certain internal data structures.
<em>RPC2&lowbar;CheckSE</em> handles the actual  file transfer.
The main procedure in <em>RPC2&lowbar;CheckSE</em> which deals with the
file transfer from SERVERTOCLIENT is the <em>PutFile</em> routine.

The <em>PutFile</em> routine sets some of the fields of the data structure SEntry,
sets the transfer state of SEntry to <em>XferInProgress</em> (transfer in progress)
and calls <em>sftp&lowbar;SendStrategy</em>. This routine sends a set of packets,
using a strategy described in the next section.
After sending the first set of packets,
a <em>while</em> loop is entered and executed as long as the transfer state
of SEntry is still in <em>XferInProgress</em>.
In the <em>while</em> loop,
<em>AwaitPacket</em> and <em>sftp&lowbar;SendStrategy</em> are called alternately.
The <em>AwaitPacket</em> routine waits for either an ACK, NAK or for
a timeout.  If a timeout occurs, the packets are retransmitted
using <em>sftp&lowbar;SendStrategy</em>.
If an ACK is received, the <em>sftp&lowbar;AckArrived</em> routine is called.
This routine advances the transmission window and checks to see
if the transfer is complete.  If so, it sets the SEntrys transfer
state to <em>XferCompleted</em>, and the <em>while</em> loop is exited. 
Otherwise, the next set of packets is transmitted, after which control
is yielded.
Note that all these packets are sent on the SFTP channel, not the main
RPC2 channel.

At the client end, the sftp&lowbar;Listener detects a packet in the socket,
receives it and processes it by calling <em>sftp&lowbar;ProcessPacket</em>.
This routine after receiving the packet calls the <em>ExaminePacket</em> routine.
This routine sanity checks the packet, and identifies it as a 
DATA packet.  It then calls <em>sftp&lowbar;DataArrived</em> which sends the requested
ACKs and writes the data to disk by calling the <em>WriteStrategy</em> routine.
The sftp&lowbar;listener yields after each packet it processes.

The packet from the client is received by the sftp&lowbar;listener at the server
which then calls the <em>ServerPacket</em> routine which modifies
the appropriate SEntry.  It then does an <em>IOMGR&lowbar;Select</em>,
and yields control.  Control is then transferred to the LWP waiting
on this packet, and the cycle continues.

<sect1>File transfer from client to server<p>
This is the case in which the server is the sink and the client is the
source.  As in previous case, the client makes a request for the file
by doing a <em>RPC2&lowbar;MakeRPC</em> on the RPC2 channel. This is received by
the servers SocketListener which wakes up a suitable LWP blocked on
a <em>RPC2&lowbar;GetRequest</em>.  The LWP then calls the routine that is meant to
handle this request.  This routine contains calls to the two routines
<em>RPC2&lowbar;InitSE</em> and <em>RPC2&lowbar;CheckSE</em>.
The <em>RPC2&lowbar;InitSE</em> initializes some of the fields of the data structure.
The main routine in <em>RPC2&lowbar;CheckSE</em> which deals with the file transfer
from CLIENTTOSERVER is the <em>GetFile</em> routine.


The <em>GetFile</em> routine sets some of the fields of the data structure SEntry,
sets the transfer state of SEntry to <em>XferInProgress</em> and sends
a <em>START</em> packet to the client to tell the
client that the server is ready to receive the file.  It then enters a
<em>while</em> loop which is executed as long as the transfer state of SEntry
is still in <em>XferInProgress</em>.  In the <em>while</em> loop, 
<em>AwaitPacket</em> and <em>sftp&lowbar;DataArrived</em> are called alternately.
The <em>AwaitPacket</em> routine waits for either a packet to arrive or for
a timeout.  If a timeout occurs, the ACK is retransmitted.
If a DATA packet is received, the <em>sftp&lowbar;DataArrived</em> routine is called.
This routine in turn calls the <em>sftp&lowbar;WriteStrategy</em>.
When the file transfer is eventually completed, the transfer state of
the SEntry is set to <em>XferCompleted</em>, and the loop is exited.

The sftp&lowbar;Listener at the client end receives the packet and decodes it, and calls the
<em>ClientPacket</em> routine which in turn identifies the packet as an <em>SFTP&lowbar;START</em>
packet.  It then calls <em>sftp&lowbar;StartArrived</em> which sets some of the fields in the SEntry
data structure and calls the <em>sftp&lowbar;SendStrategy</em> descirbed above.  The sftp&lowbar;Listener then
block on an IOMGR&lowbar;Select.  Note that it patiently waits for an ACK from the server, and
does not retransmit if it does not receive an ACK within a given time.  What prevents
the client from waiting forever is that communication exists between the client and the server
on the RPC2 channel in the form of retransmissions and BUSYs.
When an ACK arrives, it transmits the next set of packets.

The sftp&lowbar;Listener at the server end receives the packet and calls the <em>ServerPacket</em>
routine.  This routine wakes up the appropriate LWP (which is blocked in the
<em>AwaitPacket</em> call).
@foot(Note that although the client sends
a number of packets, the sftp&lowbar;Listener receives and processes them one at a time;
yielding control after each one.  The same applies at the server end.)

Note that the role of the sftp&lowbar;listener is different at the client end and at the server end.
At the client end, the whole sftp transfer is handled by the sftp&lowbar;listener.  At the server
end the sftp&lowbar;listener receives and decodes the packet.  Most of the sftp transfer is handled by the LWP thread.

<sect>Packet formats<p>

All packets carry 32 bit sequence numbers. Data packets and control
packets have independent sequence numbers. The sequence number series
of the source and sink (s) are also independent of each other.

 There are thus at least 4 sequences in a connection:
<itemize>
	Source to Sink, Data
	Source to Sink, Control
	Sink to Source, Data
	Sink to Source, Control
</itemize>
 The Sink to Source sequence space is currently never used. When doing
a multicast file transfer each sink will have independent sequence
number series.

The sequence number for a particular packet type is incremented by one for
each new packet of its type that is sent.

The <em>MOREDATA</em> flag will be set in each data packet except for the very
last one. This is to facilitate end of file detection.
If the <em>ACKME</em> flag is set on a data packet it requests an
acknowledgement, <em>ACK</em>, from all of the servers.

Each <em>ACK</em> packet describes which packets have been received by the
particular server. There should be little or no need 
to transmit an acknowledgement packet for each data packet. It is of
particular benefit to limit the number of <em>ACK</em> packets given our single
channel operating environment. The acknowledgement packets will
contend with data packets going in the other direction. 

Each acknowledgement packet has a 64-bit wide bitmask and an offset
counter, <em>GotEmAll</em>. This counter is the highest sequence number
of a data packet such that it and all preceding data packets have
been received. The bitmask indicates which of the data packets with
sequence numbers greater than <em>GotEmAll</em> that have been received.
Each bit in the bitmask represents a single packet.

<sect1>Protocol details<p>

If the source is an RPC2 client it must first wait for permission from
the sink (s) before it can transmit. This permission is granted by a
special <em>START</em> packet.

The following counters are of relevance to the SFTP source protocol
machine. <em>SendLastContig</em>, which is the sequence number of the
latest packet to be moved out of the transmission window, and
<em>SendMostRecent</em>, which is the sequence number of the data packet
last sent. There are also three important transmission parameters: the
transmission window size, <em>AckPoint</em>, and size of the <em>SendAhead</em>
set.

When an SFTP source begins the transfer, <em>SendLastContig</em> and
<em>SendMostRecent</em> will be equal. The packets in the <em>SendAhead</em> set are
transmitted, and <em>SendMostRecent</em> is increased by the size of
<em>SendAhead</em>. Only one of these packets will have the <em>ACKME</em> flag
set. The relative position of this packet in the <em>SendAhead</em> set is
given by <em>AckPoint</em>. <em>AckPoint</em> must thus be less than or equal to
the size of the <em>SendAhead</em> set.

Packets which have been sent and for which an <em>ACK</em> has been
requested but not yet received fall into two categories: the
<em>NeedAck</em> set and the <em>Worried</em> set. They are distinguished by
whether or not an retranmission timeout has occurred since they were
sent. Packets in the <em>NeedAck</em> set have been sent and an <em>ACK</em> has
been requested, but not enough time has passed to be worried about the
fact that an <em>ACK</em> has not been received.  Packets which have been
sent for which an <em>ACK</em> has not yet been requested, if any, are
called the <em>InTransit</em> set. The <em>InTransit</em> set will always be
empty if <em>AckPoint</em> equals the <em>SendAhead</em> size.

The source then waits for an <em>ACK</em> packet from the sink.
Our implementation uses the waiting time to prefetch more data
from the disk.
During ideal conditions the source will proceed only after having received
the <em>ACK</em> it is waiting for.
In practice, however, it may timeout and retransmit data
packets if it is operating as an RPC2 server.

At this point, the source will revise the <em>Worried</em> set. Any packets
that have been acknowledged will be taken off the <em>Worried</em> set.
The transmit window is shifted by increasing the
<em>SendLastContig</em> counter. It will be set to one less the smallest
sequence number of a member in the <em>Worried</em> set. 

All the packets that are in the <em>Worried</em> set are retransmitted
followed by <em>SendAhead</em> new packets. No packets will have the
<em>ACKME</em> flag set, except for the member of <em>SendAhead</em> set whose
index is given by <em>AckPoint</em>. The packets in the new <em>SendAhead</em>
set are then either added to the <em>NeedAck</em> set or to the
<em>InTransit</em> set, depending upon the <em>AckPoint</em> value, as described
above. Packets are placed in the <em>Worried</em> set only after a
retransmission interval has expired.  The procedure is repeated until
the file has been completely transfered. At no point, however, will
the protocol have more packets outstanding than what is given by the
transmit window size. Whenever the sum of the number of packets in the
various sets is greater than the transmit window size, only the first
packet in the <em>Worried</em> set will be sent.

<sect1>Sink side operation<p>

The sink keeps two counters, <em>RecvLastContig</em> and <em>RecvMostRecent</em>, which
are similar to their counterparts at the source side. <em>RecvLastContig</em>
is the sequence number of the last data packet where it and all previous data
packets have been received. It is used as the <em>GotEmAll</em> counter when
sending an <em>ACK</em> packet. <em>RecvMostRecent</em> is the highest sequence number
of a packet received so far.

Before the file transfer takes place, the source will inform the sink
about the parameters <em>RetryInterval</em>, <em>RetryCount</em> and <em>DupThreshold</em>.
If the sink is an RPC2 server it will grant the source permission to
transmit data packets by sending a <em>START</em> packet. It will then
start waiting for data packets. If the sink is an RPC2 server and no
data packet has arrived after the time specified by <em>RetryInterval</em>,
it will send an <em>ACK</em> (or <em>START</em>) packet, trying to cause the
source to retransmit its data. If this fails <em>RetryCount</em> number of
times, without any valid data packet being received, the sink will
consider the connection unusable.

The sink keeps track of the number of duplicate data packets that
have arrived since the last time an <em>ACK</em> was sent. If that number
exceed <em>DupThreshold</em>, the sink will send an <em>ACK</em> in an attempt
to inform the source about the situation.

<sect1>Client and server invariants<p>

The state of the counters at the source and sink can be summarized
by the following invariant relations, where
SendAckLimit and SendWorriedLimit are upper bounds of the 
NeedAck and Worried sets, respectively.


<sect2>Invariants when transfer is in progress <p>
<enum>
<item> SendLastContig &lt;= SendWorriedLimit &lt;= SendAckLimit &lt;= SendMostRecent 
 (SendMostRecent - SendLastContig) &lt;= WindowSize
 (SendMostRecent - SendAckLimit) &lt;= SendAhead

<item>RecvLastContig &lt;= RecvMostRecent
 (RecvMostRecent - RecvLastContig) &lt;= WindowSize
</enum>

<sect2>Invariants when transfer is completed, aborted or not started <p>
<enum>
<item>SendLastContig (at source) = SendMostRecent (at source)

<item>RecvLastContig (at sink) = RecvMostRecent (at sink)

<item>SendLastContig (at source) = RecvLastContig (at sink)
</enum>

<sect>Adjusting the Retransmission Interval<p>

SFTP uses the retranmission interval to determine when it should be
worried about packets for which it has not received an <em>ACK</em>.
Initially, the retranmission interval is set to <em>SFTP&lowbar;RetryInterval</em> (2 seconds), but varies depending on RTT observations collected during
file transfers.  When a timeout occurs, the retranmission timer is
backed off.  The backed off timer is independent of the RTT state in
the <em>sEntry</em>.

Like RPC2, SFTP collects RTT observations by using packet timestamps.
The timestamps and storage of RTT state is the same as presented in
chapter <ref id="RetryChapter" name="XXX">.  In SFTP, timestamping is <em>two-way</em>,
namely, both source and sink collect RTT observations during a
transfer. Both timestamp fields in the packet header are used: one for
the current timestamp, and one for the timestamp being echoed back to
the other side.

The source collects observations as follows: it timestamps outgoing
<em>DATA</em> packets.  The sink echos a timestamp back on the <em>ACK</em>
packet. When the <em>ACK</em> arrives at the source, the source computes
the RTT for that send-ahead set, and updates its RTO accordingly.

The sink collects observations as follows: it timestamps <em>START</em>,
<em>ACK</em>, and <em>TRIGGER</em> packets. (A trigger packet is an <em>ACK</em> that
is being used by the server because it has timed out on the client.)
The source echos the timestamp back on the first <em>DATA</em> packet sent
in response to such a packet. When that <em>DATA</em> packet arrives at the
sink, the sink computes the RTT and updates its RTO.  If the first
packet gets lost, no update is performed. If it is delayed, the update
is performed when it arrives.

All that is needed for state in the <em>sEntry</em> is a single word,
<em>TimeEcho</em>, to hold the timestamp that will next be echoed on a
packet.  Each packet may carry up to two timestamps - one is the time
at which the sender sent it, and the other is the echoed timestamp. (Only <em>ACK</em> packets and certain <em>DATA</em> packets actually use both
fields.) The spare2 and spare3 fields of the packet header are used
for these fields, called <em>TimeStamp</em> and <em>TimeEcho</em>.  These fields
were previously reserved for bitmask fields, but were not being used.

Packets are timestamped as they are sent out in the following routines:
<itemize>
 <item> sftp&lowbar;SendSendAhead, sftp&lowbar;ResendWorried, sftp&lowbar;SendFirstUnacked (data)

 <item> sftp&lowbar;SendAck

 <item> send&lowbar;SendStart
</itemize>

The packet TimeStamp field is stashed in sEntry-&gt;TimeEcho as appropriate
when a packet with a timestamp is received. This is the timestamp that
will be echoed back to the other side eventually. This occurs in:
<itemize>
 <item>sftp&lowbar;DataArrived, on the sink, if the packet advances the left edge
  of the window (Header.SeqNumber == sEntry-&gt;RecvLastContig+1).

 <item>sftp&lowbar;StartArrived, on the source, whether the transfer
  has started or not.  Data will be sent in response to the <em>START</em> packet
  either way.

 <item>sftp&lowbar;AckArrived, on the source. If there is more data to send, the
  source will send it in response to this packet.
</itemize>

The value in sEntry-&gt;TimeEcho is then placed in the Header.TimeEcho field 
in the following routines:
<itemize>
 <item>sftp&lowbar;SendAck, on the sink.

 <item>sftp&lowbar;SendSendAhead, sftp&lowbar;ResendWorried, or sftp&lowbar;SendFirstUnacked, on the
  source. The timestamp is echoed on the <em>first</em> packet sent out by these
  collectively (the one corresponding to sEntry-&gt;SendLastContig+1). 
  All other <em>DATA</em> packets carry a TimeEcho of 0. A special case occurs in 
  the first set of <em>DATA</em> packets on a server-to-client transfer, from PutFile. 
  In this case there is no timestamp to echo, because the source does not 
  hear from the sink before sending data. In this case, sEntry-&gt;TimeEcho is 
  set to 0 at the top of PutFile. A second special case also occurs in PutFile,
  when the server times out. Again, there is no timestamp to echo, because the
  data is not being sent in response to a packet from the sink.
</itemize>

RTT measurements are computed from Header.TimeEcho in the following routines:
<itemize>
 <item>sftp&lowbar;AckArrived, on the source, if the <em>ACK</em> is not a trigger.  Triggers are
  sent when the server times out during a client-to-server transfer. They do 
  not represent real observations because there was no transmission from the 
  source that caused them. Triggers are marked so that the source can 
  distinguish them from real <em>ACK</em>s. 

 <item>sftp&lowbar;DataArrived, on the sink.
</itemize>

Any zero TimeStamp or TimeEcho is ignored, and the RTO remains
unchanged. This is chiefly for compatibility with versions of SFTP
that do not use packet timestamps.  RTT state in the sEntry is
initialized on the client in <em>SFTP&lowbar;Bind2</em>, using the BindTime
supplied by RPC2. On the server, it is initialized in
<em>SFTP&lowbar;GetRequest</em>, using the same BindTime shipped to the server on
the first request on the connection.

<sect>Performance<p>

RPC2 and SFTP perform well over a wide range of network speeds.
Figure <ref id="RPC2Table" name="XXX"> compares the performance of SFTP and TCP over
three different networks: Ethernet, a WaveLan wireless network, and a
modem over a phone line.  In almost all cases, SFTPs performance
equals or exceeds that of TCP.

<!--  XXXX fix me
@begin(figure)
@define(small=text, break off, size -2)
@StandardTable(Name TRANSPORT, Columns=5, HeadingBoxed, ColumnLined, FirstColumnWidth 0.75 inch, OtherColumnWidth 0.8inch, FirstColumn Center, OtherColumns Center)
@begin(TRANSPORT)
@tableid(ThroughputTable)
@TableHeading(Immediate, RowFormat TransportColumnHeadings, Line "<bf>Protocol</bf>@\<bf>Network</bf>@\<bf>Nominal
Speed</bf>@\<bf>Receive (KB/s)</bf>@\<bf>Send (KB/s)</bf>")

@straddle(below)@\Ethernet@\10 Mb/s@\228 @small&lt;(8)&gt;@\300 @small&lt;(28)&gt;

@straddle(around)<bf>TCP</bf>@\WaveLan@\2 Mb/s@\71 @small&lt;(17)&gt;@\95 @small&lt;(10)&gt;

@straddle(above)@\Modem@\9.6 Kb/s@\0.85 @small&lt;(0.008)&gt;@\0.80 @small&lt;(0.005)&gt;

@TableHeading(Immediate, RowFormat TRANSPORTTopHeading, Line "")

@straddle(below)@\Ethernet@\10 Mb/s@\244 @small&lt;(13)&gt;@\343 @small&lt;(12)&gt;

@straddle(around)<bf>SFTP</bf>@\WaveLan@\2 Mb/s@\144 @small&lt;(8)&gt;@\146 @small&lt;(6)&gt;

@straddle(above)@\Modem@\9.6 Kb/s@\0.82 @small&lt;(0.002)&gt;@\0.86 @small&lt;(0.003)&gt;
@end(TRANSPORT)

@begin(PictureCaption)
This table compares the observed throughputs of TCP and SFTP.
The data was obtained by timing the disk-to-disk transfer of a 1MB file between a
DECpc 425SL laptop client and a DEC 5000/200 server on an isolated network.
Each result is the mean of five trials.  Numbers in parenthesis are standard deviations.
@end(PictureCaption)
@caption&lt;Transport Protocol Performance&gt;
@tag(RPC2Table)
@end(figure)
-->


