RPC2 User Guide and Reference ManualM. Satyanarayanan (Editor)Richard Draves, James Kistler, Anders Klemets, Qi Lu, Lily Mummert,   David Nichols, Larry Raper, Gowthami Rajendran, Jonathan Rosenberg,   Ellen SiegelThis work has been supported by the Defense Advanced Research Projects
Agency (Avionics Lab, Wright Research and Development Center, Aeronautical
Systems Division (AFSC), U.S. Air Force, Wright-Patterson AFB, Ohio,
45433-6543 under Contract F33615-90-C-1465, ARPA Order No. 7597), the
National Science Foundation (CCR-8657907), and the IBM Corporation (Andrew
Project, Faculty Development Grant, Research Initiation Grant), and
Digital Equipment Corporation (External Research Project).  The views and
conclusion expressed in this paper are those of the authors, and should
not be interpreted as those of DARPA, NSF, IBM, DEC or Carnegie Mellon
University.    School of Computer Science
Carnegie Mellon University
Pittsburgh, PA 15213  This manual describes the programming interface and internal design of
\fIRPC2\fP, a highly portable and extensible remote procedure call
package for Unix. RPC2 runs on top of the IP/UDP protocol, and provides
support for streaming file transfer, parallel RPC calls, and IP-level
multicast.  The manual also describes two other packages used by RPC2:
\fIRP2Gen\fP, a stub generator, and \fILWP\fP, a coroutine-based
lightweight process package.  All the software described in this manual
runs at user-level on the Unix 4.3BSD interface; no kernel modifications
are necessary.  The software has been ported to a variety of machine
architectures (such as IBM-RT, MIPS, Sun2, Sun3, Sparc, and i386) and to
variants of the Unix operating system (such as Mach, SunOS and AIX).Preface                                           

.Pp
RPC2 is a portable and extensible remote procedure call package built on top
of the IP/UDP network protocol.  Since its original use in the Andrew File
System@cite[lsqb  ]Howard88[rsqb  ], it has been used by the Coda File
System@cite[lsqb  ]Satyanarayanan89b[rsqb  ], the Scylla database server and a
variety of other applications at Carnegie Mellon University and elsewhere.
RPC2 runs on LWP, a lightweight process package that allows multiple
non-preemptive threads of control to coexist within one Unix process.  RP2Gen
is a stub generator that simplifies the use of RPC2.  RPC2 and LWP run
entirely at user-level on the Unix 4.3BSD interface; no kernel changes are
necessary.
.Pp
The first versions of LWP and RPC2 were operational in early 1984 and mid-1985
respectively.  The design of LWP predates that of the Cthreads package in
Mach@cite[lsqb  ]cthreads[rsqb  ].  LWP and Cthreads are conceptually similar, but
differ substantially in the details.  It should, in principle, be possible to
modify RPC2 to run directly on top of Cthreads, but we have not tried to do
this so far.  We have successfully emulated all of LWP on top of the
preemptive and nonpre-emptive versions of Cthreads, and a subset of the
non-preemptive version of Cthreads on top of LWP.
.Pp
Both LWP and RPC2 have evolved over time, resulting in increased functionality
and robustness.  They have also been ported to a wide variety of machine
architectures, such as IBM-RTs, MIPS, Sun2, Sun3, Sparc, and i386, as well as
variants of the Unix operating systems such as Mach, SunOS and AIX.  The RPC2
extensions include the SFTP side effect mechanism for streaming file transfer,
the MultiRPC mechanism for parallel RPC calls, and IP multicast versions of
MultiRPC and SFTP.  Whenever there has been choice between portability and
machine-specific performance, we have always favored portability.
.Pp
Although this manual may seem formidable, RPC2 is not difficult to use.  For
simple applications you do not have to know everything described in these
pages.  Advanced features such as use of side effects, MultiRPC, and use of
multicast for parallelism can be ignored initially.
.Pp
Some day there will be a true tutorial in this manual.  Until then the best 
way to learn RPC2 is as follows:  
.nr ll +1
.nr el +1
.nr t\n(ll 1
.nr e\n(el 0 1
.af e\n(el \*(f\n(el
.if \n(ll>1 .RS
.nr bi 1
.Pp
Study the overview and examples in Chapter .
The latter are actual pieces of working code, and you should try running
the examples.  Appendix  gives you details
of library and include file names, current limitations, and other similar
details.
Read Chapter  next.  This describes the
procedural abstraction provided by RP2Gen, the stub generator.
.nr bi 1
.Pp
Read Chapter  and Part
@ref[lsqb  ]LWPPart[rsqb  ], which describe the RPC2 and LWP runtime calls,
respectively.  You may need to refer to Appendix , which contains the header files used
by these packages.
.nr bi 1
.Pp
After you have mastered the basics, you may wish to explore the advanced
features described in Chapters ,  and .
.nr bi 1
.Pp
If you wish to learn about the internals of RPC2, you may wish to consult
the chapters in Part .
.if \n(ll>1 .RE
.nr el -1
.nr ll -1
.Pp
\fB Credits \fP
.Pp
The original design, implementation and documentation of RPC2 was by
M. Satyanarayanan.  The MultiRPC implementation and chapter were done by Ellen
Siegel.  The extensions to use multicast were done by James Kistler.  Jonathan
Rosenberg contributed to the RP2Gen implementation and chapter.  Comments from
Robert Sidebotham, David Nichols, Vasilis Apostolides, Drew Perkins, Bradley
White, Stephen Hecht and many other users have been helpful in the improvement
of RPC2.
.Pp
The original design and implementation of LWP was done by Larry Raper.  Its
documentation descends from a manual by Jonathan Rosenberg and Larry Raper,
later extended by David Nichols and M. Satyanarayanan.  Richard Draves, Qi Lu,
Anders Klemets and Gowthami Rajendran helped in revising and improving this
document.
.Pp
.Pp
.Pp
.Pp
.Pp
.Pp
.Pp
Usage and Implementation Notes                  

.Pp
Current Limitations

.Pp
.nr ll +1
.nr t\n(ll 0
.if \n(ll>1 .RS
.nr bi 1
.Pp
Only one portal is allowed in @RPC2(Init).  This should be a list eventually.
.nr bi 1
.Pp
SmartFTP is the only side-effect type currently supported.
.nr bi 1
.Pp
getsubsysbyname() is a fake routine.  It knows about "Vice2-FileServer", 
and "Vice2-CallBack".
.nr bi 1
.Pp
At present the multicast routines work only on RTs running Mach.  The
non-multicast MultiRPC routines work on all architectures.
.if \n(ll>1 .RE
.nr ll -1
.Pp
.Pp
Where to Find Files at Carnegie Mellon

.Pp
The LWP release consists of a set of include files (cargs.h, lwp.h,
lock.h, timer.h, and preempt.h) and a library (liblwp.a).
.Pp
The RPC2 release consists of a set of include files (rpc2.h, se.h), 
a set of libraries (librpc2.a and libse.a), and the RP2Gen binary (rp2gen).
.Pp
The LWP and RPC2 releases are available for RTs, Sun-3s, Vaxen, Pmaxen running
Andrew and Mach, and Next running Andrew.  (Systypes rt[lowbar]r3,
rt[lowbar]mach, sun3[lowbar]35, sun3[lowbar]mach, vax[lowbar]3,
vax[lowbar]mach, pmax[lowbar]3, pmax[lowbar]mach, next[lowbar]mach20)
.Pp
On Coda, these files may be found in
\f(CR/coda/project/coda/alpha/[lcub  ]include,lib,bin[rcub  ]\fP.
.Pp
On Andrew, these files are located in
\f(CR/afs/andrew/scs/cs/15-612[lcub  ]include,lib,bin[rcub  ]\fP.
.Pp
iopen () is a system call created at Carnegie Mellon.  Put an empty dummy 
function if your C library doesn't have it.
.Pp
Debugging

.Pp
The following external RPC2 variables may be set for debugging:
.nr ll +1
.nr t\n(ll 2
.if \n(ll>1 .RS
.IP "@RPC2(DebugLevel)"
.nr bi 1
.Pp
values of 0, 1, 10 and 100 are meaningful.
Initial value is 0.
.Pp
.IP "@RPC2(Perror)"
.nr bi 1
.Pp
set to 1 to see Unix error messages on stderr.
Initial value is 1.
.Pp
.IP "@RPC2(Trace)"
.nr bi 1
.Pp
set to 1 to enable tracing. 0 turns off tracing.
Initial value is 0.  Also see description of @RPC2(InitTrace) and 
@RPC2(DumpTrace) calls.
.if \n(ll>1 .RE
.nr ll -1
.Pp
A global variable \fBlwp[lowbar]debug\fP can be set to activate or
deactivate debugging messages tracing the flow of control within the LWP
routines.  To activate debugging messages, set \fBlwp[lowbar]debug\fP to a
non-zero value.  To deactivate, reset it to zero.  All debugging output from
the LWP routines is sent to stdout.
.Pp
The LWP package checks for stack overflows at each context switch.  The
\fBlwp[lowbar]overflowAction\fP variable controls the action of the package
when an overflow occurs.  If it is set to \fBLWP[lowbar]SOMESSAGE\fP, then
LWP will print a message on stderr telling of the overflow and will then be
quiet.  If it is set to \fBLWP[lowbar]SOABORT\fP, LWP will call the abort
() subroutine.  Finally, if it is set to \fBLWP[lowbar]SOQUIET\fP, LWP will
ignore the errors.  The \fBLWP[lowbar]SOABORT\fP setting is the default.
.Pp
.Pp
